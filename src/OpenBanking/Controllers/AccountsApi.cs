/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OpenBanking.Attributes;
using OpenBanking.Models;

namespace OpenBanking.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class AccountsApiController : Controller
    { 
        /// <summary>
        /// Get Account Detail
        /// </summary>
        /// <remarks>Obtain detailed information on a single account</remarks>
        /// <param name="accountId">A tokenised identifier for the account which is unique but not shareable</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/{accountId}")]
        [ValidateModelState]
        [SwaggerOperation("GetAccountDetail")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingAccount), description: "Success")]
        public virtual IActionResult GetAccountDetail([FromRoute][Required]string accountId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingAccount));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : \"\",\r\n  \"meta\" : { },\r\n  \"links\" : {\r\n    \"self\" : \"self\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingAccount>(exampleJson)
            : default(ResponseBankingAccount);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Transaction Detail
        /// </summary>
        /// <remarks>Obtain detailed information on a transaction for a specific account</remarks>
        /// <param name="accountId">The account id token that is used to uniquely represent the account</param>
        /// <param name="transactionId">The unique identifier for the specific transaction for which details are being requested</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/{accountId}/transactions/{transactionId}")]
        [ValidateModelState]
        [SwaggerOperation("GetTransactionDetail")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingTransactionDetail), description: "Success")]
        public virtual IActionResult GetTransactionDetail([FromRoute][Required]string accountId, [FromRoute][Required]string transactionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingTransactionDetail));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : {\r\n    \"transaction\" : \"\"\r\n  },\r\n  \"meta\" : { },\r\n  \"links\" : {\r\n    \"self\" : \"self\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingTransactionDetail>(exampleJson)
            : default(ResponseBankingTransactionDetail);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Transactions For Account
        /// </summary>
        /// <remarks>Obtain transactions for a specific account</remarks>
        /// <param name="accountId">ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.</param>
        /// <param name="startTime">Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type</param>
        /// <param name="endTime">Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type</param>
        /// <param name="minAmount">Filter transactions to only transactions with amounts higher or equal to than this amount</param>
        /// <param name="maxAmount">Filter transactions to only transactions with amounts less than or equal to than this amount</param>
        /// <param name="text">Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/{accountId}/transactions")]
        [ValidateModelState]
        [SwaggerOperation("GetTransactions")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingTransactions), description: "Success")]
        public virtual IActionResult GetTransactions([FromRoute][Required]string accountId, [FromQuery]string startTime, [FromQuery]string endTime, [FromQuery]string minAmount, [FromQuery]string maxAmount, [FromQuery]string text, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingTransactions));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : {\r\n    \"transactions\" : [ {\r\n      \"postingDateTime\" : \"postingDateTime\",\r\n      \"amount\" : \"amount\",\r\n      \"apcaNumber\" : \"apcaNumber\",\r\n      \"isDetailAvailable\" : true,\r\n      \"description\" : \"description\",\r\n      \"type\" : \"FEE\",\r\n      \"billerName\" : \"billerName\",\r\n      \"executionDateTime\" : \"executionDateTime\",\r\n      \"transactionId\" : \"transactionId\",\r\n      \"merchantName\" : \"merchantName\",\r\n      \"billerCode\" : \"billerCode\",\r\n      \"reference\" : \"reference\",\r\n      \"accountId\" : \"accountId\",\r\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\r\n      \"valueDateTime\" : \"valueDateTime\",\r\n      \"currency\" : \"currency\",\r\n      \"crn\" : \"crn\",\r\n      \"status\" : \"PENDING\"\r\n    }, {\r\n      \"postingDateTime\" : \"postingDateTime\",\r\n      \"amount\" : \"amount\",\r\n      \"apcaNumber\" : \"apcaNumber\",\r\n      \"isDetailAvailable\" : true,\r\n      \"description\" : \"description\",\r\n      \"type\" : \"FEE\",\r\n      \"billerName\" : \"billerName\",\r\n      \"executionDateTime\" : \"executionDateTime\",\r\n      \"transactionId\" : \"transactionId\",\r\n      \"merchantName\" : \"merchantName\",\r\n      \"billerCode\" : \"billerCode\",\r\n      \"reference\" : \"reference\",\r\n      \"accountId\" : \"accountId\",\r\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\r\n      \"valueDateTime\" : \"valueDateTime\",\r\n      \"currency\" : \"currency\",\r\n      \"crn\" : \"crn\",\r\n      \"status\" : \"PENDING\"\r\n    } ]\r\n  },\r\n  \"meta\" : {\r\n    \"totalRecords\" : 0,\r\n    \"totalPages\" : 6\r\n  },\r\n  \"links\" : {\r\n    \"next\" : \"next\",\r\n    \"last\" : \"last\",\r\n    \"prev\" : \"prev\",\r\n    \"self\" : \"self\",\r\n    \"first\" : \"first\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingTransactions>(exampleJson)
            : default(ResponseBankingTransactions);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Accounts
        /// </summary>
        /// <remarks>Obtain a list of accounts</remarks>
        /// <param name="openStatus">Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed</param>
        /// <param name="isOwned">Filters accounts based on whether they are owned by the authorised customer</param>
        /// <param name="productCategory">Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts")]
        [ValidateModelState]
        [SwaggerOperation("ListAccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingAccounts), description: "Success")]
        public virtual IActionResult ListAccounts([FromQuery]string openStatus, [FromQuery]string isOwned, [FromQuery]string productCategory, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingAccounts));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : {\r\n    \"accounts\" : [ {\r\n      \"accountId\" : \"accountId\",\r\n      \"maskedNumber\" : \"maskedNumber\",\r\n      \"openStatus\" : \"OPEN\",\r\n      \"displayName\" : \"displayName\",\r\n      \"isOwned\" : true,\r\n      \"nickname\" : \"nickname\",\r\n      \"productName\" : \"productName\",\r\n      \"productCategory\" : { }\r\n    }, {\r\n      \"accountId\" : \"accountId\",\r\n      \"maskedNumber\" : \"maskedNumber\",\r\n      \"openStatus\" : \"OPEN\",\r\n      \"displayName\" : \"displayName\",\r\n      \"isOwned\" : true,\r\n      \"nickname\" : \"nickname\",\r\n      \"productName\" : \"productName\",\r\n      \"productCategory\" : { }\r\n    } ]\r\n  },\r\n  \"meta\" : {\r\n    \"totalRecords\" : 0,\r\n    \"totalPages\" : 6\r\n  },\r\n  \"links\" : {\r\n    \"next\" : \"next\",\r\n    \"last\" : \"last\",\r\n    \"prev\" : \"prev\",\r\n    \"self\" : \"self\",\r\n    \"first\" : \"first\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingAccounts>(exampleJson)
            : default(ResponseBankingAccounts);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Bulk Balances
        /// </summary>
        /// <remarks>Obtain balances for multiple, filtered accounts</remarks>
        /// <param name="openStatus">Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed</param>
        /// <param name="isOwned">Filters accounts based on whether they are owned by the authorised customer</param>
        /// <param name="productCategory">Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">resource listing the financial balances for the account</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/balances")]
        [ValidateModelState]
        [SwaggerOperation("ListBalancesBulk")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingAccountsBalances), description: "resource listing the financial balances for the account")]
        public virtual IActionResult ListBalancesBulk([FromQuery]string openStatus, [FromQuery]string isOwned, [FromQuery]string productCategory, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingAccountsBalances));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : {\r\n    \"balances\" : [ {\r\n      \"accountId\" : \"accountId\",\r\n      \"purses\" : [ {\r\n        \"amount\" : \"amount\",\r\n        \"currency\" : \"currency\"\r\n      }, {\r\n        \"amount\" : \"amount\",\r\n        \"currency\" : \"currency\"\r\n      } ],\r\n      \"lending\" : {\r\n        \"amortisedLimit\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"creditLimit\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"accountBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"availableBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        }\r\n      },\r\n      \"deposit\" : {\r\n        \"currentBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"availableBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        }\r\n      },\r\n      \"balanceUType\" : \"deposit\"\r\n    }, {\r\n      \"accountId\" : \"accountId\",\r\n      \"purses\" : [ {\r\n        \"amount\" : \"amount\",\r\n        \"currency\" : \"currency\"\r\n      }, {\r\n        \"amount\" : \"amount\",\r\n        \"currency\" : \"currency\"\r\n      } ],\r\n      \"lending\" : {\r\n        \"amortisedLimit\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"creditLimit\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"accountBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"availableBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        }\r\n      },\r\n      \"deposit\" : {\r\n        \"currentBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"availableBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        }\r\n      },\r\n      \"balanceUType\" : \"deposit\"\r\n    } ]\r\n  },\r\n  \"meta\" : {\r\n    \"totalRecords\" : 0,\r\n    \"totalPages\" : 6\r\n  },\r\n  \"links\" : {\r\n    \"next\" : \"next\",\r\n    \"last\" : \"last\",\r\n    \"prev\" : \"prev\",\r\n    \"self\" : \"self\",\r\n    \"first\" : \"first\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingAccountsBalances>(exampleJson)
            : default(ResponseBankingAccountsBalances);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Balances For Specific Accounts
        /// </summary>
        /// <remarks>Obtain balances for a specified list of accounts</remarks>
        /// <param name="accountIds">The list of account IDs to obtain information for</param>
        /// <response code="200">Success</response>
        /// <response code="422">The request was well formed but was unable to be processed due to business logic specific to the request</response>
        [HttpPost]
        [Route("/cds-au/v1/banking/accounts/balances")]
        [ValidateModelState]
        [SwaggerOperation("ListBalancesSpecificAccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingAccountsBalances), description: "Success")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorList), description: "The request was well formed but was unable to be processed due to business logic specific to the request")]
        public virtual IActionResult ListBalancesSpecificAccounts([FromBody]RequestAccountIds accountIds)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingAccountsBalances));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorList));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : {\r\n    \"balances\" : [ {\r\n      \"accountId\" : \"accountId\",\r\n      \"purses\" : [ {\r\n        \"amount\" : \"amount\",\r\n        \"currency\" : \"currency\"\r\n      }, {\r\n        \"amount\" : \"amount\",\r\n        \"currency\" : \"currency\"\r\n      } ],\r\n      \"lending\" : {\r\n        \"amortisedLimit\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"creditLimit\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"accountBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"availableBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        }\r\n      },\r\n      \"deposit\" : {\r\n        \"currentBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"availableBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        }\r\n      },\r\n      \"balanceUType\" : \"deposit\"\r\n    }, {\r\n      \"accountId\" : \"accountId\",\r\n      \"purses\" : [ {\r\n        \"amount\" : \"amount\",\r\n        \"currency\" : \"currency\"\r\n      }, {\r\n        \"amount\" : \"amount\",\r\n        \"currency\" : \"currency\"\r\n      } ],\r\n      \"lending\" : {\r\n        \"amortisedLimit\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"creditLimit\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"accountBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"availableBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        }\r\n      },\r\n      \"deposit\" : {\r\n        \"currentBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        },\r\n        \"availableBalance\" : {\r\n          \"amount\" : \"amount\",\r\n          \"currency\" : \"currency\"\r\n        }\r\n      },\r\n      \"balanceUType\" : \"deposit\"\r\n    } ]\r\n  },\r\n  \"meta\" : {\r\n    \"totalRecords\" : 0,\r\n    \"totalPages\" : 6\r\n  },\r\n  \"links\" : {\r\n    \"next\" : \"next\",\r\n    \"last\" : \"last\",\r\n    \"prev\" : \"prev\",\r\n    \"self\" : \"self\",\r\n    \"first\" : \"first\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingAccountsBalances>(exampleJson)
            : default(ResponseBankingAccountsBalances);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Transactions For Multiple Accounts
        /// </summary>
        /// <remarks>Obtain transactions for multiple, filtered accounts</remarks>
        /// <param name="openStatus">Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed</param>
        /// <param name="isOwned">Filters accounts based on whether they are owned by the authorised customer</param>
        /// <param name="productCategory">Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.</param>
        /// <param name="startTime">Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type</param>
        /// <param name="endTime">Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type</param>
        /// <param name="minAmount">Filter transactions to only transactions with amounts higher or equal to than this amount</param>
        /// <param name="maxAmount">Filter transactions to only transactions with amounts less than or equal to than this amount</param>
        /// <param name="text">Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/transactions")]
        [ValidateModelState]
        [SwaggerOperation("ListTransactionsBulk")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingTransactions), description: "Success")]
        public virtual IActionResult ListTransactionsBulk([FromQuery]string openStatus, [FromQuery]string isOwned, [FromQuery]string productCategory, [FromQuery]string startTime, [FromQuery]string endTime, [FromQuery]string minAmount, [FromQuery]string maxAmount, [FromQuery]string text, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingTransactions));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : {\r\n    \"transactions\" : [ {\r\n      \"postingDateTime\" : \"postingDateTime\",\r\n      \"amount\" : \"amount\",\r\n      \"apcaNumber\" : \"apcaNumber\",\r\n      \"isDetailAvailable\" : true,\r\n      \"description\" : \"description\",\r\n      \"type\" : \"FEE\",\r\n      \"billerName\" : \"billerName\",\r\n      \"executionDateTime\" : \"executionDateTime\",\r\n      \"transactionId\" : \"transactionId\",\r\n      \"merchantName\" : \"merchantName\",\r\n      \"billerCode\" : \"billerCode\",\r\n      \"reference\" : \"reference\",\r\n      \"accountId\" : \"accountId\",\r\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\r\n      \"valueDateTime\" : \"valueDateTime\",\r\n      \"currency\" : \"currency\",\r\n      \"crn\" : \"crn\",\r\n      \"status\" : \"PENDING\"\r\n    }, {\r\n      \"postingDateTime\" : \"postingDateTime\",\r\n      \"amount\" : \"amount\",\r\n      \"apcaNumber\" : \"apcaNumber\",\r\n      \"isDetailAvailable\" : true,\r\n      \"description\" : \"description\",\r\n      \"type\" : \"FEE\",\r\n      \"billerName\" : \"billerName\",\r\n      \"executionDateTime\" : \"executionDateTime\",\r\n      \"transactionId\" : \"transactionId\",\r\n      \"merchantName\" : \"merchantName\",\r\n      \"billerCode\" : \"billerCode\",\r\n      \"reference\" : \"reference\",\r\n      \"accountId\" : \"accountId\",\r\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\r\n      \"valueDateTime\" : \"valueDateTime\",\r\n      \"currency\" : \"currency\",\r\n      \"crn\" : \"crn\",\r\n      \"status\" : \"PENDING\"\r\n    } ]\r\n  },\r\n  \"meta\" : {\r\n    \"totalRecords\" : 0,\r\n    \"totalPages\" : 6\r\n  },\r\n  \"links\" : {\r\n    \"next\" : \"next\",\r\n    \"last\" : \"last\",\r\n    \"prev\" : \"prev\",\r\n    \"self\" : \"self\",\r\n    \"first\" : \"first\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingTransactions>(exampleJson)
            : default(ResponseBankingTransactions);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Transactions For Specific Accounts
        /// </summary>
        /// <remarks>Obtain transactions for a specified list of transactions.</remarks>
        /// <param name="accountIds">The list of account IDs to obtain information for</param>
        /// <param name="startTime">Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type</param>
        /// <param name="endTime">Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type</param>
        /// <param name="minAmount">Filter transactions to only transactions with amounts higher or equal to than this amount</param>
        /// <param name="maxAmount">Filter transactions to only transactions with amounts less than or equal to than this amount</param>
        /// <param name="text">Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        /// <response code="422">The request was well formed but was unable to be processed due to business logic specific to the request</response>
        [HttpPost]
        [Route("/cds-au/v1/banking/accounts/transactions")]
        [ValidateModelState]
        [SwaggerOperation("ListTransactionsSpecificAccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingTransactions), description: "Success")]
        [SwaggerResponse(statusCode: 422, type: typeof(ErrorList), description: "The request was well formed but was unable to be processed due to business logic specific to the request")]
        public virtual IActionResult ListTransactionsSpecificAccounts([FromBody]RequestAccountIds accountIds, [FromQuery]string startTime, [FromQuery]string endTime, [FromQuery]string minAmount, [FromQuery]string maxAmount, [FromQuery]string text, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingTransactions));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ErrorList));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : {\r\n    \"transactions\" : [ {\r\n      \"postingDateTime\" : \"postingDateTime\",\r\n      \"amount\" : \"amount\",\r\n      \"apcaNumber\" : \"apcaNumber\",\r\n      \"isDetailAvailable\" : true,\r\n      \"description\" : \"description\",\r\n      \"type\" : \"FEE\",\r\n      \"billerName\" : \"billerName\",\r\n      \"executionDateTime\" : \"executionDateTime\",\r\n      \"transactionId\" : \"transactionId\",\r\n      \"merchantName\" : \"merchantName\",\r\n      \"billerCode\" : \"billerCode\",\r\n      \"reference\" : \"reference\",\r\n      \"accountId\" : \"accountId\",\r\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\r\n      \"valueDateTime\" : \"valueDateTime\",\r\n      \"currency\" : \"currency\",\r\n      \"crn\" : \"crn\",\r\n      \"status\" : \"PENDING\"\r\n    }, {\r\n      \"postingDateTime\" : \"postingDateTime\",\r\n      \"amount\" : \"amount\",\r\n      \"apcaNumber\" : \"apcaNumber\",\r\n      \"isDetailAvailable\" : true,\r\n      \"description\" : \"description\",\r\n      \"type\" : \"FEE\",\r\n      \"billerName\" : \"billerName\",\r\n      \"executionDateTime\" : \"executionDateTime\",\r\n      \"transactionId\" : \"transactionId\",\r\n      \"merchantName\" : \"merchantName\",\r\n      \"billerCode\" : \"billerCode\",\r\n      \"reference\" : \"reference\",\r\n      \"accountId\" : \"accountId\",\r\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\r\n      \"valueDateTime\" : \"valueDateTime\",\r\n      \"currency\" : \"currency\",\r\n      \"crn\" : \"crn\",\r\n      \"status\" : \"PENDING\"\r\n    } ]\r\n  },\r\n  \"meta\" : {\r\n    \"totalRecords\" : 0,\r\n    \"totalPages\" : 6\r\n  },\r\n  \"links\" : {\r\n    \"next\" : \"next\",\r\n    \"last\" : \"last\",\r\n    \"prev\" : \"prev\",\r\n    \"self\" : \"self\",\r\n    \"first\" : \"first\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingTransactions>(exampleJson)
            : default(ResponseBankingTransactions);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
