/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OpenBanking.Attributes;
using OpenBanking.Models;

namespace OpenBanking.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ProductsApiController : Controller
    { 
        /// <summary>
        /// Get Product Detail
        /// </summary>
        /// <remarks>Obtain detailed information on a single product offered openly to the market</remarks>
        /// <param name="productId">ID of the specific product requested</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/products/{productId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProductDetail")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingProduct), description: "Success")]
        public virtual IActionResult GetProductDetail([FromRoute][Required]string productId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingProduct));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : \"\",\r\n  \"meta\" : { },\r\n  \"links\" : {\r\n    \"self\" : \"self\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingProduct>(exampleJson)
            : default(ResponseBankingProduct);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Products
        /// </summary>
        /// <remarks>Obtain a list of products that are currently openly offered to the market</remarks>
        /// <param name="effective">Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields.  If absent defaults to &#39;CURRENT&#39;</param>
        /// <param name="updatedSince">Only include products that have been updated after the specified date and time. If absent defaults to include all products</param>
        /// <param name="brand">Filter results based on a specific brand</param>
        /// <param name="productCategory">Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/products")]
        [ValidateModelState]
        [SwaggerOperation("ListProducts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingProducts), description: "Success")]
        public virtual IActionResult ListProducts([FromQuery]string effective, [FromQuery]string updatedSince, [FromQuery]string brand, [FromQuery]string productCategory, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingProducts));

            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : {\r\n    \"products\" : [ {\r\n      \"effectiveTo\" : \"effectiveTo\",\r\n      \"lastUpdated\" : \"lastUpdated\",\r\n      \"additionalInformation\" : {\r\n        \"eligibilityUri\" : \"eligibilityUri\",\r\n        \"bundleUri\" : \"bundleUri\",\r\n        \"feesAndPricingUri\" : \"feesAndPricingUri\",\r\n        \"termsUri\" : \"termsUri\",\r\n        \"overviewUri\" : \"overviewUri\"\r\n      },\r\n      \"brandName\" : \"brandName\",\r\n      \"isTailored\" : true,\r\n      \"productId\" : \"productId\",\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"applicationUri\" : \"applicationUri\",\r\n      \"effectiveFrom\" : \"effectiveFrom\",\r\n      \"brand\" : \"brand\",\r\n      \"productCategory\" : { }\r\n    }, {\r\n      \"effectiveTo\" : \"effectiveTo\",\r\n      \"lastUpdated\" : \"lastUpdated\",\r\n      \"additionalInformation\" : {\r\n        \"eligibilityUri\" : \"eligibilityUri\",\r\n        \"bundleUri\" : \"bundleUri\",\r\n        \"feesAndPricingUri\" : \"feesAndPricingUri\",\r\n        \"termsUri\" : \"termsUri\",\r\n        \"overviewUri\" : \"overviewUri\"\r\n      },\r\n      \"brandName\" : \"brandName\",\r\n      \"isTailored\" : true,\r\n      \"productId\" : \"productId\",\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"applicationUri\" : \"applicationUri\",\r\n      \"effectiveFrom\" : \"effectiveFrom\",\r\n      \"brand\" : \"brand\",\r\n      \"productCategory\" : { }\r\n    } ]\r\n  },\r\n  \"meta\" : {\r\n    \"totalRecords\" : 0,\r\n    \"totalPages\" : 6\r\n  },\r\n  \"links\" : {\r\n    \"next\" : \"next\",\r\n    \"last\" : \"last\",\r\n    \"prev\" : \"prev\",\r\n    \"self\" : \"self\",\r\n    \"first\" : \"first\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingProducts>(exampleJson)
            : default(ResponseBankingProducts);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
