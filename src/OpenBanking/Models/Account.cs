/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Account : IEquatable<Account>
    { 
        /// <summary>
        /// A unique ID of the account adhering to the standards for ID permanence
        /// </summary>
        /// <value>A unique ID of the account adhering to the standards for ID permanence</value>
        [Required]
        [DataMember(Name="accountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// The display name of the account. If a customer provided nickname is available that value should be returned
        /// </summary>
        /// <value>The display name of the account. If a customer provided nickname is available that value should be returned</value>
        [Required]
        [DataMember(Name="displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// A customer supplied nick name for the account
        /// </summary>
        /// <value>A customer supplied nick name for the account</value>
        [DataMember(Name="nickname")]
        public string Nickname { get; set; }

        /// <summary>
        /// A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number this should be formatted with each digit masked and the last three digits unmasked
        /// </summary>
        /// <value>A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number this should be formatted with each digit masked and the last three digits unmasked</value>
        [Required]
        [DataMember(Name="maskedNumber")]
        public string MaskedNumber { get; set; }

        /// <summary>
        /// Open or closed status for the account.  If not present then OPEN is assumed
        /// </summary>
        /// <value>Open or closed status for the account.  If not present then OPEN is assumed</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OpenStatusEnum
        {
            /// <summary>
            /// Enum OPENEnum for OPEN
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPENEnum = 1,            /// <summary>
            /// Enum CLOSEDEnum for CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSEDEnum = 2
        }

        /// <summary>
        /// Open or closed status for the account.  If not present then OPEN is assumed
        /// </summary>
        /// <value>Open or closed status for the account.  If not present then OPEN is assumed</value>
        [DataMember(Name="openStatus")]
        public OpenStatusEnum? OpenStatus { get; set; }

        /// <summary>
        /// Flag indicating that the customer associated with the authorisation is an owner of the account.  Does not indicate sole ownership, however.  If no present then &#39;true&#39; is assumed
        /// </summary>
        /// <value>Flag indicating that the customer associated with the authorisation is an owner of the account.  Does not indicate sole ownership, however.  If no present then &#39;true&#39; is assumed</value>
        [DataMember(Name="isOwned")]
        public bool? IsOwned { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategory
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EnumProductCategory
        {
            /// <summary>
            /// Enum PERSATCALLDEPOSITSEnum for PERS_AT_CALL_DEPOSITS
            /// </summary>
            [EnumMember(Value = "PERS_AT_CALL_DEPOSITS")]
            PERSATCALLDEPOSITSEnum = 1,            /// <summary>
            /// Enum BUSATCALLDEPOSITSEnum for BUS_AT_CALL_DEPOSITS
            /// </summary>
            [EnumMember(Value = "BUS_AT_CALL_DEPOSITS")]
            BUSATCALLDEPOSITSEnum = 2,            /// <summary>
            /// Enum TERMDEPOSITSEnum for TERM_DEPOSITS
            /// </summary>
            [EnumMember(Value = "TERM_DEPOSITS")]
            TERMDEPOSITSEnum = 3,            /// <summary>
            /// Enum RESIDENTIALMORTGAGESEnum for RESIDENTIAL_MORTGAGES
            /// </summary>
            [EnumMember(Value = "RESIDENTIAL_MORTGAGES")]
            RESIDENTIALMORTGAGESEnum = 4,            /// <summary>
            /// Enum PERSCREDANDCHRGCARDSEnum for PERS_CRED_AND_CHRG_CARDS
            /// </summary>
            [EnumMember(Value = "PERS_CRED_AND_CHRG_CARDS")]
            PERSCREDANDCHRGCARDSEnum = 5,            /// <summary>
            /// Enum BUSCREDANDCHRGCARDSEnum for BUS_CRED_AND_CHRG_CARDS
            /// </summary>
            [EnumMember(Value = "BUS_CRED_AND_CHRG_CARDS")]
            BUSCREDANDCHRGCARDSEnum = 6,            /// <summary>
            /// Enum PERSLOANSEnum for PERS_LOANS
            /// </summary>
            [EnumMember(Value = "PERS_LOANS")]
            PERSLOANSEnum = 7,            /// <summary>
            /// Enum PERSLEASINGEnum for PERS_LEASING
            /// </summary>
            [EnumMember(Value = "PERS_LEASING")]
            PERSLEASINGEnum = 8,            /// <summary>
            /// Enum BUSLEASINGEnum for BUS_LEASING
            /// </summary>
            [EnumMember(Value = "BUS_LEASING")]
            BUSLEASINGEnum = 9,            /// <summary>
            /// Enum TRADEFINANCEEnum for TRADE_FINANCE
            /// </summary>
            [EnumMember(Value = "TRADE_FINANCE")]
            TRADEFINANCEEnum = 10,            /// <summary>
            /// Enum PERSOVERDRAFTEnum for PERS_OVERDRAFT
            /// </summary>
            [EnumMember(Value = "PERS_OVERDRAFT")]
            PERSOVERDRAFTEnum = 11,            /// <summary>
            /// Enum BUSOVERDRAFTEnum for BUS_OVERDRAFT
            /// </summary>
            [EnumMember(Value = "BUS_OVERDRAFT")]
            BUSOVERDRAFTEnum = 12,            /// <summary>
            /// Enum BUSLOANSEnum for BUS_LOANS
            /// </summary>
            [EnumMember(Value = "BUS_LOANS")]
            BUSLOANSEnum = 13,            /// <summary>
            /// Enum FOREIGNCURRATCALLDEPOSITSEnum for FOREIGN_CURR_AT_CALL_DEPOSITS
            /// </summary>
            [EnumMember(Value = "FOREIGN_CURR_AT_CALL_DEPOSITS")]
            FOREIGNCURRATCALLDEPOSITSEnum = 14,            /// <summary>
            /// Enum FOREIGNCURRTERMDEPOSITSEnum for FOREIGN_CURR_TERM_DEPOSITS
            /// </summary>
            [EnumMember(Value = "FOREIGN_CURR_TERM_DEPOSITS")]
            FOREIGNCURRTERMDEPOSITSEnum = 15,            /// <summary>
            /// Enum FOREIGNCURRLOANEnum for FOREIGN_CURR_LOAN
            /// </summary>
            [EnumMember(Value = "FOREIGN_CURR_LOAN")]
            FOREIGNCURRLOANEnum = 16,            /// <summary>
            /// Enum FOREIGNCURRRENCTOVERDRAFTEnum for FOREIGN_CURRRENCT_OVERDRAFT
            /// </summary>
            [EnumMember(Value = "FOREIGN_CURRRENCT_OVERDRAFT")]
            FOREIGNCURRRENCTOVERDRAFTEnum = 17,            /// <summary>
            /// Enum TRAVELCARDEnum for TRAVEL_CARD
            /// </summary>
            [EnumMember(Value = "TRAVEL_CARD")]
            TRAVELCARDEnum = 18
        }

        /// <summary>
        /// Gets or Sets ProductCategory
        /// </summary>
        [Required]
        [DataMember(Name="productCategory")]
        public EnumProductCategory? ProductCategory { get; set; }

        /// <summary>
        /// A unique name or identifier for the account class for this account as defined by the account provider.  Not expected to be used for display
        /// </summary>
        /// <value>A unique name or identifier for the account class for this account as defined by the account provider.  Not expected to be used for display</value>
        [Required]
        [DataMember(Name="productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  MaskedNumber: ").Append(MaskedNumber).Append("\n");
            sb.Append("  OpenStatus: ").Append(OpenStatus).Append("\n");
            sb.Append("  IsOwned: ").Append(IsOwned).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Account)obj);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="other">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    Nickname == other.Nickname ||
                    Nickname != null &&
                    Nickname.Equals(other.Nickname)
                ) && 
                (
                    MaskedNumber == other.MaskedNumber ||
                    MaskedNumber != null &&
                    MaskedNumber.Equals(other.MaskedNumber)
                ) && 
                (
                    OpenStatus == other.OpenStatus ||
                    OpenStatus != null &&
                    OpenStatus.Equals(other.OpenStatus)
                ) && 
                (
                    IsOwned == other.IsOwned ||
                    IsOwned != null &&
                    IsOwned.Equals(other.IsOwned)
                ) && 
                (
                    ProductCategory == other.ProductCategory ||
                    ProductCategory != null &&
                    ProductCategory.Equals(other.ProductCategory)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (Nickname != null)
                    hashCode = hashCode * 59 + Nickname.GetHashCode();
                    if (MaskedNumber != null)
                    hashCode = hashCode * 59 + MaskedNumber.GetHashCode();
                    if (OpenStatus != null)
                    hashCode = hashCode * 59 + OpenStatus.GetHashCode();
                    if (IsOwned != null)
                    hashCode = hashCode * 59 + IsOwned.GetHashCode();
                    if (ProductCategory != null)
                    hashCode = hashCode * 59 + ProductCategory.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Account left, Account right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Account left, Account right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
