/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccountDetail : IEquatable<AccountDetail>
    { 
        /// <summary>
        /// A unique ID of the account adhering to the standards for ID permanence
        /// </summary>
        /// <value>A unique ID of the account adhering to the standards for ID permanence</value>
        [Required]
        [DataMember(Name="accountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// The display name of the account. If a customer provided nickname is available that value should be returned
        /// </summary>
        /// <value>The display name of the account. If a customer provided nickname is available that value should be returned</value>
        [Required]
        [DataMember(Name="displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// A customer supplied nick name for the account
        /// </summary>
        /// <value>A customer supplied nick name for the account</value>
        [DataMember(Name="nickname")]
        public string Nickname { get; set; }

        /// <summary>
        /// A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number this should be formatted with each digit masked and the last three digits unmasked
        /// </summary>
        /// <value>A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number this should be formatted with each digit masked and the last three digits unmasked</value>
        [Required]
        [DataMember(Name="maskedNumber")]
        public string MaskedNumber { get; set; }

        /// <summary>
        /// Open or closed status for the account.  If not present then OPEN is assumed
        /// </summary>
        /// <value>Open or closed status for the account.  If not present then OPEN is assumed</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OpenStatusEnum
        {
            /// <summary>
            /// Enum OPENEnum for OPEN
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPENEnum = 1,            /// <summary>
            /// Enum CLOSEDEnum for CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSEDEnum = 2
        }

        /// <summary>
        /// Open or closed status for the account.  If not present then OPEN is assumed
        /// </summary>
        /// <value>Open or closed status for the account.  If not present then OPEN is assumed</value>
        [DataMember(Name="openStatus")]
        public OpenStatusEnum? OpenStatus { get; set; }

        /// <summary>
        /// Flag indicating that the customer associated with the authorisation is an owner of the account.  Does not indicate sole ownership, however.  If no present then &#39;true&#39; is assumed
        /// </summary>
        /// <value>Flag indicating that the customer associated with the authorisation is an owner of the account.  Does not indicate sole ownership, however.  If no present then &#39;true&#39; is assumed</value>
        [DataMember(Name="isOwned")]
        public bool? IsOwned { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategory
        /// </summary>
        [Required]
        [DataMember(Name="productCategory")]
        public EnumProductCategory ProductCategory { get; set; }

        /// <summary>
        /// A unique name or identifier for the account class for this account as defined by the account provider.  Not expected to be used for display
        /// </summary>
        /// <value>A unique name or identifier for the account class for this account as defined by the account provider.  Not expected to be used for display</value>
        [Required]
        [DataMember(Name="productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// The unmasked BSB for the account.  Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces
        /// </summary>
        /// <value>The unmasked BSB for the account.  Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces</value>
        [DataMember(Name="bsb")]
        public string Bsb { get; set; }

        /// <summary>
        /// The unmasked account number for the account.  Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces
        /// </summary>
        /// <value>The unmasked account number for the account.  Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces</value>
        [DataMember(Name="accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer
        /// </summary>
        /// <value>Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer</value>
        [DataMember(Name="bundleName")]
        public string BundleName { get; set; }

        /// <summary>
        /// The type of structure to present account specific fields.
        /// </summary>
        /// <value>The type of structure to present account specific fields.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SpecificAccountUTypeEnum
        {
            /// <summary>
            /// Enum TermDepositEnum for termDeposit
            /// </summary>
            [EnumMember(Value = "termDeposit")]
            TermDepositEnum = 1,            /// <summary>
            /// Enum CreditCardEnum for creditCard
            /// </summary>
            [EnumMember(Value = "creditCard")]
            CreditCardEnum = 2,            /// <summary>
            /// Enum LoanEnum for loan
            /// </summary>
            [EnumMember(Value = "loan")]
            LoanEnum = 3
        }

        /// <summary>
        /// The type of structure to present account specific fields.
        /// </summary>
        /// <value>The type of structure to present account specific fields.</value>
        [DataMember(Name="specificAccountUType")]
        public SpecificAccountUTypeEnum? SpecificAccountUType { get; set; }

        /// <summary>
        /// Gets or Sets TermDeposit
        /// </summary>
        [DataMember(Name="termDeposit")]
        public TermDepositAccount TermDeposit { get; set; }

        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [DataMember(Name="creditCard")]
        public CreditCardAccount CreditCard { get; set; }

        /// <summary>
        /// Gets or Sets Loan
        /// </summary>
        [DataMember(Name="loan")]
        public LoanAccount Loan { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features")]
        public List<AccountFeatures> Features { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees")]
        public List<AccountFees> Fees { get; set; }

        /// <summary>
        /// Gets or Sets DepositRates
        /// </summary>
        [DataMember(Name="depositRates")]
        public List<AccountDepositRates> DepositRates { get; set; }

        /// <summary>
        /// Gets or Sets LendingRates
        /// </summary>
        [DataMember(Name="lendingRates")]
        public List<AccountLendingRates> LendingRates { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address")]
        public PhysicalAddress Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDetail {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  MaskedNumber: ").Append(MaskedNumber).Append("\n");
            sb.Append("  OpenStatus: ").Append(OpenStatus).Append("\n");
            sb.Append("  IsOwned: ").Append(IsOwned).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Bsb: ").Append(Bsb).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BundleName: ").Append(BundleName).Append("\n");
            sb.Append("  SpecificAccountUType: ").Append(SpecificAccountUType).Append("\n");
            sb.Append("  TermDeposit: ").Append(TermDeposit).Append("\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  Loan: ").Append(Loan).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  DepositRates: ").Append(DepositRates).Append("\n");
            sb.Append("  LendingRates: ").Append(LendingRates).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountDetail)obj);
        }

        /// <summary>
        /// Returns true if AccountDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDetail other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    Nickname == other.Nickname ||
                    Nickname != null &&
                    Nickname.Equals(other.Nickname)
                ) && 
                (
                    MaskedNumber == other.MaskedNumber ||
                    MaskedNumber != null &&
                    MaskedNumber.Equals(other.MaskedNumber)
                ) && 
                (
                    OpenStatus == other.OpenStatus ||
                    OpenStatus != null &&
                    OpenStatus.Equals(other.OpenStatus)
                ) && 
                (
                    IsOwned == other.IsOwned ||
                    IsOwned != null &&
                    IsOwned.Equals(other.IsOwned)
                ) && 
                (
                    ProductCategory == other.ProductCategory ||
                    ProductCategory != null &&
                    ProductCategory.Equals(other.ProductCategory)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    Bsb == other.Bsb ||
                    Bsb != null &&
                    Bsb.Equals(other.Bsb)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    BundleName == other.BundleName ||
                    BundleName != null &&
                    BundleName.Equals(other.BundleName)
                ) && 
                (
                    SpecificAccountUType == other.SpecificAccountUType ||
                    SpecificAccountUType != null &&
                    SpecificAccountUType.Equals(other.SpecificAccountUType)
                ) && 
                (
                    TermDeposit == other.TermDeposit ||
                    TermDeposit != null &&
                    TermDeposit.Equals(other.TermDeposit)
                ) && 
                (
                    CreditCard == other.CreditCard ||
                    CreditCard != null &&
                    CreditCard.Equals(other.CreditCard)
                ) && 
                (
                    Loan == other.Loan ||
                    Loan != null &&
                    Loan.Equals(other.Loan)
                ) && 
                (
                    Features == other.Features ||
                    Features != null &&
                    Features.SequenceEqual(other.Features)
                ) && 
                (
                    Fees == other.Fees ||
                    Fees != null &&
                    Fees.SequenceEqual(other.Fees)
                ) && 
                (
                    DepositRates == other.DepositRates ||
                    DepositRates != null &&
                    DepositRates.SequenceEqual(other.DepositRates)
                ) && 
                (
                    LendingRates == other.LendingRates ||
                    LendingRates != null &&
                    LendingRates.SequenceEqual(other.LendingRates)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (Nickname != null)
                    hashCode = hashCode * 59 + Nickname.GetHashCode();
                    if (MaskedNumber != null)
                    hashCode = hashCode * 59 + MaskedNumber.GetHashCode();
                    if (OpenStatus != null)
                    hashCode = hashCode * 59 + OpenStatus.GetHashCode();
                    if (IsOwned != null)
                    hashCode = hashCode * 59 + IsOwned.GetHashCode();
                    if (ProductCategory != null)
                    hashCode = hashCode * 59 + ProductCategory.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (Bsb != null)
                    hashCode = hashCode * 59 + Bsb.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (BundleName != null)
                    hashCode = hashCode * 59 + BundleName.GetHashCode();
                    if (SpecificAccountUType != null)
                    hashCode = hashCode * 59 + SpecificAccountUType.GetHashCode();
                    if (TermDeposit != null)
                    hashCode = hashCode * 59 + TermDeposit.GetHashCode();
                    if (CreditCard != null)
                    hashCode = hashCode * 59 + CreditCard.GetHashCode();
                    if (Loan != null)
                    hashCode = hashCode * 59 + Loan.GetHashCode();
                    if (Features != null)
                    hashCode = hashCode * 59 + Features.GetHashCode();
                    if (Fees != null)
                    hashCode = hashCode * 59 + Fees.GetHashCode();
                    if (DepositRates != null)
                    hashCode = hashCode * 59 + DepositRates.GetHashCode();
                    if (LendingRates != null)
                    hashCode = hashCode * 59 + LendingRates.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountDetail left, AccountDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountDetail left, AccountDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
