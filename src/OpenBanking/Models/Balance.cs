/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Balance : IEquatable<Balance>
    { 
        /// <summary>
        /// A unique ID of the account adhering to the standards for ID permanence
        /// </summary>
        /// <value>A unique ID of the account adhering to the standards for ID permanence</value>
        [Required]
        [DataMember(Name="accountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// The type of balance object provided for the account
        /// </summary>
        /// <value>The type of balance object provided for the account</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BalanceUTypeEnum
        {
            /// <summary>
            /// Enum DepositEnum for deposit
            /// </summary>
            [EnumMember(Value = "deposit")]
            DepositEnum = 1,            /// <summary>
            /// Enum LendingEnum for lending
            /// </summary>
            [EnumMember(Value = "lending")]
            LendingEnum = 2,            /// <summary>
            /// Enum PursesEnum for purses
            /// </summary>
            [EnumMember(Value = "purses")]
            PursesEnum = 3
        }

        /// <summary>
        /// The type of balance object provided for the account
        /// </summary>
        /// <value>The type of balance object provided for the account</value>
        [Required]
        [DataMember(Name="balanceUType")]
        public BalanceUTypeEnum? BalanceUType { get; set; }

        /// <summary>
        /// Gets or Sets Deposit
        /// </summary>
        [DataMember(Name="deposit")]
        public DepositBalance Deposit { get; set; }

        /// <summary>
        /// Gets or Sets Lending
        /// </summary>
        [DataMember(Name="lending")]
        public LendingBalance Lending { get; set; }

        /// <summary>
        /// Gets or Sets Purses
        /// </summary>
        [DataMember(Name="purses")]
        public List<CurrencyAmount> Purses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Balance {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BalanceUType: ").Append(BalanceUType).Append("\n");
            sb.Append("  Deposit: ").Append(Deposit).Append("\n");
            sb.Append("  Lending: ").Append(Lending).Append("\n");
            sb.Append("  Purses: ").Append(Purses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Balance)obj);
        }

        /// <summary>
        /// Returns true if Balance instances are equal
        /// </summary>
        /// <param name="other">Instance of Balance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    BalanceUType == other.BalanceUType ||
                    BalanceUType != null &&
                    BalanceUType.Equals(other.BalanceUType)
                ) && 
                (
                    Deposit == other.Deposit ||
                    Deposit != null &&
                    Deposit.Equals(other.Deposit)
                ) && 
                (
                    Lending == other.Lending ||
                    Lending != null &&
                    Lending.Equals(other.Lending)
                ) && 
                (
                    Purses == other.Purses ||
                    Purses != null &&
                    Purses.SequenceEqual(other.Purses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (BalanceUType != null)
                    hashCode = hashCode * 59 + BalanceUType.GetHashCode();
                    if (Deposit != null)
                    hashCode = hashCode * 59 + Deposit.GetHashCode();
                    if (Lending != null)
                    hashCode = hashCode * 59 + Lending.GetHashCode();
                    if (Purses != null)
                    hashCode = hashCode * 59 + Purses.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Balance left, Balance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Balance left, Balance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
