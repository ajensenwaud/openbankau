/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DirectDebits : IEquatable<DirectDebits>
    { 
        /// <summary>
        /// A unique ID of the account adhering to the standards for ID permanence.
        /// </summary>
        /// <value>A unique ID of the account adhering to the standards for ID permanence.</value>
        [Required]
        [DataMember(Name="accountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AuthorisedEntity
        /// </summary>
        [DataMember(Name="authorisedEntity")]
        public AuthorisedEntity AuthorisedEntity { get; set; }

        /// <summary>
        /// The date and time of the last debit executed under this authorisation
        /// </summary>
        /// <value>The date and time of the last debit executed under this authorisation</value>
        [DataMember(Name="lastDebitDateTime")]
        public string LastDebitDateTime { get; set; }

        /// <summary>
        /// The amount of the last debit executed under this authorisation
        /// </summary>
        /// <value>The amount of the last debit executed under this authorisation</value>
        [DataMember(Name="lastDebitAmount")]
        public string LastDebitAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectDebits {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AuthorisedEntity: ").Append(AuthorisedEntity).Append("\n");
            sb.Append("  LastDebitDateTime: ").Append(LastDebitDateTime).Append("\n");
            sb.Append("  LastDebitAmount: ").Append(LastDebitAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DirectDebits)obj);
        }

        /// <summary>
        /// Returns true if DirectDebits instances are equal
        /// </summary>
        /// <param name="other">Instance of DirectDebits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectDebits other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AuthorisedEntity == other.AuthorisedEntity ||
                    AuthorisedEntity != null &&
                    AuthorisedEntity.Equals(other.AuthorisedEntity)
                ) && 
                (
                    LastDebitDateTime == other.LastDebitDateTime ||
                    LastDebitDateTime != null &&
                    LastDebitDateTime.Equals(other.LastDebitDateTime)
                ) && 
                (
                    LastDebitAmount == other.LastDebitAmount ||
                    LastDebitAmount != null &&
                    LastDebitAmount.Equals(other.LastDebitAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AuthorisedEntity != null)
                    hashCode = hashCode * 59 + AuthorisedEntity.GetHashCode();
                    if (LastDebitDateTime != null)
                    hashCode = hashCode * 59 + LastDebitDateTime.GetHashCode();
                    if (LastDebitAmount != null)
                    hashCode = hashCode * 59 + LastDebitAmount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DirectDebits left, DirectDebits right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DirectDebits left, DirectDebits right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
