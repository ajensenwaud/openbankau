/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DomesticPayee : IEquatable<DomesticPayee>
    { 
        /// <summary>
        /// Type of account object included. Valid values are: { payeeAccountUType - - account A standard Australian account defined by BSB/Account Number payId A PayID recognised by NPP
        /// </summary>
        /// <value>Type of account object included. Valid values are: { payeeAccountUType - - account A standard Australian account defined by BSB/Account Number payId A PayID recognised by NPP</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PayeeAccountUTypeEnum
        {
            /// <summary>
            /// Enum AccountEnum for account
            /// </summary>
            [EnumMember(Value = "account")]
            AccountEnum = 1,            /// <summary>
            /// Enum CardEnum for card
            /// </summary>
            [EnumMember(Value = "card")]
            CardEnum = 2,            /// <summary>
            /// Enum PayIdEnum for payId
            /// </summary>
            [EnumMember(Value = "payId")]
            PayIdEnum = 3
        }

        /// <summary>
        /// Type of account object included. Valid values are: { payeeAccountUType - - account A standard Australian account defined by BSB/Account Number payId A PayID recognised by NPP
        /// </summary>
        /// <value>Type of account object included. Valid values are: { payeeAccountUType - - account A standard Australian account defined by BSB/Account Number payId A PayID recognised by NPP</value>
        [Required]
        [DataMember(Name="payeeAccountUType")]
        public PayeeAccountUTypeEnum? PayeeAccountUType { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account")]
        public DomesticPayeeAccount Account { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="card")]
        public DomesticPayeeCard Card { get; set; }

        /// <summary>
        /// Gets or Sets PayId
        /// </summary>
        [DataMember(Name="payId")]
        public DomesticPayeePayId PayId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomesticPayee {\n");
            sb.Append("  PayeeAccountUType: ").Append(PayeeAccountUType).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  PayId: ").Append(PayId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DomesticPayee)obj);
        }

        /// <summary>
        /// Returns true if DomesticPayee instances are equal
        /// </summary>
        /// <param name="other">Instance of DomesticPayee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomesticPayee other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PayeeAccountUType == other.PayeeAccountUType ||
                    PayeeAccountUType != null &&
                    PayeeAccountUType.Equals(other.PayeeAccountUType)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    Card == other.Card ||
                    Card != null &&
                    Card.Equals(other.Card)
                ) && 
                (
                    PayId == other.PayId ||
                    PayId != null &&
                    PayId.Equals(other.PayId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PayeeAccountUType != null)
                    hashCode = hashCode * 59 + PayeeAccountUType.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (Card != null)
                    hashCode = hashCode * 59 + Card.GetHashCode();
                    if (PayId != null)
                    hashCode = hashCode * 59 + PayId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DomesticPayee left, DomesticPayee right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DomesticPayee left, DomesticPayee right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
