/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InternationalPayeeBankDetails : IEquatable<InternationalPayeeBankDetails>
    { 
        /// <summary>
        /// Country of the recipient institution. A valid ISO 3166 Alpha-3 country code
        /// </summary>
        /// <value>Country of the recipient institution. A valid ISO 3166 Alpha-3 country code</value>
        [Required]
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Account Targeted for payment
        /// </summary>
        /// <value>Account Targeted for payment</value>
        [Required]
        [DataMember(Name="accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BankAddress
        /// </summary>
        [DataMember(Name="bankAddress")]
        public InternationalPayeeBankDetailsBankAddress BankAddress { get; set; }

        /// <summary>
        /// Swift bank code.  Aligns with standard [ISO 9362](https://www.iso.org/standard/60390.html)
        /// </summary>
        /// <value>Swift bank code.  Aligns with standard [ISO 9362](https://www.iso.org/standard/60390.html)</value>
        [DataMember(Name="beneficiaryBankBIC")]
        public string BeneficiaryBankBIC { get; set; }

        /// <summary>
        /// Number for Fedwire payment (Federal Reserve Wire Network)
        /// </summary>
        /// <value>Number for Fedwire payment (Federal Reserve Wire Network)</value>
        [DataMember(Name="fedWireNumber")]
        public string FedWireNumber { get; set; }

        /// <summary>
        /// Sort code used for account identification in some jurisdictions
        /// </summary>
        /// <value>Sort code used for account identification in some jurisdictions</value>
        [DataMember(Name="sortCode")]
        public string SortCode { get; set; }

        /// <summary>
        /// Number for the Clearing House Interbank Payments System
        /// </summary>
        /// <value>Number for the Clearing House Interbank Payments System</value>
        [DataMember(Name="chipNumber")]
        public string ChipNumber { get; set; }

        /// <summary>
        /// International bank routing number
        /// </summary>
        /// <value>International bank routing number</value>
        [DataMember(Name="routingNumber")]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)
        /// </summary>
        /// <value>The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)</value>
        [DataMember(Name="legalEntityIdentifier")]
        public string LegalEntityIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InternationalPayeeBankDetails {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BankAddress: ").Append(BankAddress).Append("\n");
            sb.Append("  BeneficiaryBankBIC: ").Append(BeneficiaryBankBIC).Append("\n");
            sb.Append("  FedWireNumber: ").Append(FedWireNumber).Append("\n");
            sb.Append("  SortCode: ").Append(SortCode).Append("\n");
            sb.Append("  ChipNumber: ").Append(ChipNumber).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  LegalEntityIdentifier: ").Append(LegalEntityIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InternationalPayeeBankDetails)obj);
        }

        /// <summary>
        /// Returns true if InternationalPayeeBankDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of InternationalPayeeBankDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InternationalPayeeBankDetails other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) && 
                (
                    BankAddress == other.BankAddress ||
                    BankAddress != null &&
                    BankAddress.Equals(other.BankAddress)
                ) && 
                (
                    BeneficiaryBankBIC == other.BeneficiaryBankBIC ||
                    BeneficiaryBankBIC != null &&
                    BeneficiaryBankBIC.Equals(other.BeneficiaryBankBIC)
                ) && 
                (
                    FedWireNumber == other.FedWireNumber ||
                    FedWireNumber != null &&
                    FedWireNumber.Equals(other.FedWireNumber)
                ) && 
                (
                    SortCode == other.SortCode ||
                    SortCode != null &&
                    SortCode.Equals(other.SortCode)
                ) && 
                (
                    ChipNumber == other.ChipNumber ||
                    ChipNumber != null &&
                    ChipNumber.Equals(other.ChipNumber)
                ) && 
                (
                    RoutingNumber == other.RoutingNumber ||
                    RoutingNumber != null &&
                    RoutingNumber.Equals(other.RoutingNumber)
                ) && 
                (
                    LegalEntityIdentifier == other.LegalEntityIdentifier ||
                    LegalEntityIdentifier != null &&
                    LegalEntityIdentifier.Equals(other.LegalEntityIdentifier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                    if (BankAddress != null)
                    hashCode = hashCode * 59 + BankAddress.GetHashCode();
                    if (BeneficiaryBankBIC != null)
                    hashCode = hashCode * 59 + BeneficiaryBankBIC.GetHashCode();
                    if (FedWireNumber != null)
                    hashCode = hashCode * 59 + FedWireNumber.GetHashCode();
                    if (SortCode != null)
                    hashCode = hashCode * 59 + SortCode.GetHashCode();
                    if (ChipNumber != null)
                    hashCode = hashCode * 59 + ChipNumber.GetHashCode();
                    if (RoutingNumber != null)
                    hashCode = hashCode * 59 + RoutingNumber.GetHashCode();
                    if (LegalEntityIdentifier != null)
                    hashCode = hashCode * 59 + LegalEntityIdentifier.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InternationalPayeeBankDetails left, InternationalPayeeBankDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InternationalPayeeBankDetails left, InternationalPayeeBankDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
