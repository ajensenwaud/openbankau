/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LoanAccount : IEquatable<LoanAccount>
    { 
        /// <summary>
        /// Optional original start date for the loan
        /// </summary>
        /// <value>Optional original start date for the loan</value>
        [DataMember(Name="originalStartDate")]
        public string OriginalStartDate { get; set; }

        /// <summary>
        /// Optional original loan value
        /// </summary>
        /// <value>Optional original loan value</value>
        [DataMember(Name="originalLoanAmount")]
        public string OriginalLoanAmount { get; set; }

        /// <summary>
        /// If absent assumes AUD
        /// </summary>
        /// <value>If absent assumes AUD</value>
        [DataMember(Name="originalLoanCurrency")]
        public string OriginalLoanCurrency { get; set; }

        /// <summary>
        /// Date that the loan is due to be repaid in full
        /// </summary>
        /// <value>Date that the loan is due to be repaid in full</value>
        [DataMember(Name="loanEndDate")]
        public string LoanEndDate { get; set; }

        /// <summary>
        /// Next date that an instalment is required
        /// </summary>
        /// <value>Next date that an instalment is required</value>
        [DataMember(Name="nextInstalmentDate")]
        public string NextInstalmentDate { get; set; }

        /// <summary>
        /// Minimum amount of next instalment
        /// </summary>
        /// <value>Minimum amount of next instalment</value>
        [DataMember(Name="minInstalmentAmount")]
        public string MinInstalmentAmount { get; set; }

        /// <summary>
        /// If absent assumes AUD
        /// </summary>
        /// <value>If absent assumes AUD</value>
        [DataMember(Name="minInstalmentCurrency")]
        public string MinInstalmentCurrency { get; set; }

        /// <summary>
        /// Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account
        /// </summary>
        /// <value>Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account</value>
        [DataMember(Name="maxRedraw")]
        public string MaxRedraw { get; set; }

        /// <summary>
        /// If absent assumes AUD
        /// </summary>
        /// <value>If absent assumes AUD</value>
        [DataMember(Name="maxRedrawCurrency")]
        public string MaxRedrawCurrency { get; set; }

        /// <summary>
        /// Minimum redraw amount
        /// </summary>
        /// <value>Minimum redraw amount</value>
        [DataMember(Name="minRedraw")]
        public string MinRedraw { get; set; }

        /// <summary>
        /// If absent assumes AUD
        /// </summary>
        /// <value>If absent assumes AUD</value>
        [DataMember(Name="minRedrawCurrency")]
        public string MinRedrawCurrency { get; set; }

        /// <summary>
        /// Set to true if one or more offset accounts are configured for this loan account
        /// </summary>
        /// <value>Set to true if one or more offset accounts are configured for this loan account</value>
        [DataMember(Name="offsetAccountEnabled")]
        public bool? OffsetAccountEnabled { get; set; }

        /// <summary>
        /// The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accesses under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation
        /// </summary>
        /// <value>The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accesses under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation</value>
        [DataMember(Name="offsetAccountIds")]
        public List<string> OffsetAccountIds { get; set; }

        /// <summary>
        /// The expected or required repayment frequency. Formatted according to ISO 8601 Durations
        /// </summary>
        /// <value>The expected or required repayment frequency. Formatted according to ISO 8601 Durations</value>
        [DataMember(Name="repaymentFrequency")]
        public string RepaymentFrequency { get; set; }

        /// <summary>
        /// Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST
        /// </summary>
        /// <value>Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RepaymentTypeEnum
        {
            /// <summary>
            /// Enum INTERESTONLYEnum for INTEREST_ONLY
            /// </summary>
            [EnumMember(Value = "INTEREST_ONLY")]
            INTERESTONLYEnum = 1,            /// <summary>
            /// Enum PRINCIPALANDINTERESTEnum for PRINCIPAL_AND_INTEREST
            /// </summary>
            [EnumMember(Value = "PRINCIPAL_AND_INTEREST")]
            PRINCIPALANDINTERESTEnum = 2
        }

        /// <summary>
        /// Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST
        /// </summary>
        /// <value>Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST</value>
        [DataMember(Name="repaymentType")]
        public RepaymentTypeEnum? RepaymentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanAccount {\n");
            sb.Append("  OriginalStartDate: ").Append(OriginalStartDate).Append("\n");
            sb.Append("  OriginalLoanAmount: ").Append(OriginalLoanAmount).Append("\n");
            sb.Append("  OriginalLoanCurrency: ").Append(OriginalLoanCurrency).Append("\n");
            sb.Append("  LoanEndDate: ").Append(LoanEndDate).Append("\n");
            sb.Append("  NextInstalmentDate: ").Append(NextInstalmentDate).Append("\n");
            sb.Append("  MinInstalmentAmount: ").Append(MinInstalmentAmount).Append("\n");
            sb.Append("  MinInstalmentCurrency: ").Append(MinInstalmentCurrency).Append("\n");
            sb.Append("  MaxRedraw: ").Append(MaxRedraw).Append("\n");
            sb.Append("  MaxRedrawCurrency: ").Append(MaxRedrawCurrency).Append("\n");
            sb.Append("  MinRedraw: ").Append(MinRedraw).Append("\n");
            sb.Append("  MinRedrawCurrency: ").Append(MinRedrawCurrency).Append("\n");
            sb.Append("  OffsetAccountEnabled: ").Append(OffsetAccountEnabled).Append("\n");
            sb.Append("  OffsetAccountIds: ").Append(OffsetAccountIds).Append("\n");
            sb.Append("  RepaymentFrequency: ").Append(RepaymentFrequency).Append("\n");
            sb.Append("  RepaymentType: ").Append(RepaymentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LoanAccount)obj);
        }

        /// <summary>
        /// Returns true if LoanAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of LoanAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanAccount other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OriginalStartDate == other.OriginalStartDate ||
                    OriginalStartDate != null &&
                    OriginalStartDate.Equals(other.OriginalStartDate)
                ) && 
                (
                    OriginalLoanAmount == other.OriginalLoanAmount ||
                    OriginalLoanAmount != null &&
                    OriginalLoanAmount.Equals(other.OriginalLoanAmount)
                ) && 
                (
                    OriginalLoanCurrency == other.OriginalLoanCurrency ||
                    OriginalLoanCurrency != null &&
                    OriginalLoanCurrency.Equals(other.OriginalLoanCurrency)
                ) && 
                (
                    LoanEndDate == other.LoanEndDate ||
                    LoanEndDate != null &&
                    LoanEndDate.Equals(other.LoanEndDate)
                ) && 
                (
                    NextInstalmentDate == other.NextInstalmentDate ||
                    NextInstalmentDate != null &&
                    NextInstalmentDate.Equals(other.NextInstalmentDate)
                ) && 
                (
                    MinInstalmentAmount == other.MinInstalmentAmount ||
                    MinInstalmentAmount != null &&
                    MinInstalmentAmount.Equals(other.MinInstalmentAmount)
                ) && 
                (
                    MinInstalmentCurrency == other.MinInstalmentCurrency ||
                    MinInstalmentCurrency != null &&
                    MinInstalmentCurrency.Equals(other.MinInstalmentCurrency)
                ) && 
                (
                    MaxRedraw == other.MaxRedraw ||
                    MaxRedraw != null &&
                    MaxRedraw.Equals(other.MaxRedraw)
                ) && 
                (
                    MaxRedrawCurrency == other.MaxRedrawCurrency ||
                    MaxRedrawCurrency != null &&
                    MaxRedrawCurrency.Equals(other.MaxRedrawCurrency)
                ) && 
                (
                    MinRedraw == other.MinRedraw ||
                    MinRedraw != null &&
                    MinRedraw.Equals(other.MinRedraw)
                ) && 
                (
                    MinRedrawCurrency == other.MinRedrawCurrency ||
                    MinRedrawCurrency != null &&
                    MinRedrawCurrency.Equals(other.MinRedrawCurrency)
                ) && 
                (
                    OffsetAccountEnabled == other.OffsetAccountEnabled ||
                    OffsetAccountEnabled != null &&
                    OffsetAccountEnabled.Equals(other.OffsetAccountEnabled)
                ) && 
                (
                    OffsetAccountIds == other.OffsetAccountIds ||
                    OffsetAccountIds != null &&
                    OffsetAccountIds.SequenceEqual(other.OffsetAccountIds)
                ) && 
                (
                    RepaymentFrequency == other.RepaymentFrequency ||
                    RepaymentFrequency != null &&
                    RepaymentFrequency.Equals(other.RepaymentFrequency)
                ) && 
                (
                    RepaymentType == other.RepaymentType ||
                    RepaymentType != null &&
                    RepaymentType.Equals(other.RepaymentType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OriginalStartDate != null)
                    hashCode = hashCode * 59 + OriginalStartDate.GetHashCode();
                    if (OriginalLoanAmount != null)
                    hashCode = hashCode * 59 + OriginalLoanAmount.GetHashCode();
                    if (OriginalLoanCurrency != null)
                    hashCode = hashCode * 59 + OriginalLoanCurrency.GetHashCode();
                    if (LoanEndDate != null)
                    hashCode = hashCode * 59 + LoanEndDate.GetHashCode();
                    if (NextInstalmentDate != null)
                    hashCode = hashCode * 59 + NextInstalmentDate.GetHashCode();
                    if (MinInstalmentAmount != null)
                    hashCode = hashCode * 59 + MinInstalmentAmount.GetHashCode();
                    if (MinInstalmentCurrency != null)
                    hashCode = hashCode * 59 + MinInstalmentCurrency.GetHashCode();
                    if (MaxRedraw != null)
                    hashCode = hashCode * 59 + MaxRedraw.GetHashCode();
                    if (MaxRedrawCurrency != null)
                    hashCode = hashCode * 59 + MaxRedrawCurrency.GetHashCode();
                    if (MinRedraw != null)
                    hashCode = hashCode * 59 + MinRedraw.GetHashCode();
                    if (MinRedrawCurrency != null)
                    hashCode = hashCode * 59 + MinRedrawCurrency.GetHashCode();
                    if (OffsetAccountEnabled != null)
                    hashCode = hashCode * 59 + OffsetAccountEnabled.GetHashCode();
                    if (OffsetAccountIds != null)
                    hashCode = hashCode * 59 + OffsetAccountIds.GetHashCode();
                    if (RepaymentFrequency != null)
                    hashCode = hashCode * 59 + RepaymentFrequency.GetHashCode();
                    if (RepaymentType != null)
                    hashCode = hashCode * 59 + RepaymentType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LoanAccount left, LoanAccount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LoanAccount left, LoanAccount right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
