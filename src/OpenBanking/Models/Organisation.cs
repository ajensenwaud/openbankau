/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Organisation : IEquatable<Organisation>
    { 
        /// <summary>
        /// The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data
        /// </summary>
        /// <value>The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data</value>
        [Required]
        [DataMember(Name="lastUpdateTime")]
        public string LastUpdateTime { get; set; }

        /// <summary>
        /// The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field
        /// </summary>
        /// <value>The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field</value>
        [DataMember(Name="agentFirstName")]
        public string AgentFirstName { get; set; }

        /// <summary>
        /// The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field
        /// </summary>
        /// <value>The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field</value>
        [Required]
        [DataMember(Name="agentLastName")]
        public string AgentLastName { get; set; }

        /// <summary>
        /// The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display.  Default to “Unspecified” if the role is not known
        /// </summary>
        /// <value>The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display.  Default to “Unspecified” if the role is not known</value>
        [Required]
        [DataMember(Name="agentRole")]
        public string AgentRole { get; set; }

        /// <summary>
        /// Name of the organisation
        /// </summary>
        /// <value>Name of the organisation</value>
        [Required]
        [DataMember(Name="businessName")]
        public string BusinessName { get; set; }

        /// <summary>
        /// Legal name, if different to the business name
        /// </summary>
        /// <value>Legal name, if different to the business name</value>
        [DataMember(Name="legalName")]
        public string LegalName { get; set; }

        /// <summary>
        /// Short name used for communication, if  different to the business name
        /// </summary>
        /// <value>Short name used for communication, if  different to the business name</value>
        [DataMember(Name="shortName")]
        public string ShortName { get; set; }

        /// <summary>
        /// Australian Business Number for the organisation
        /// </summary>
        /// <value>Australian Business Number for the organisation</value>
        [DataMember(Name="abn")]
        public string Abn { get; set; }

        /// <summary>
        /// Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type
        /// </summary>
        /// <value>Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type</value>
        [DataMember(Name="acn")]
        public string Acn { get; set; }

        /// <summary>
        /// True if registered with the ACNC.  False if not. Absent or null if not confirmed.
        /// </summary>
        /// <value>True if registered with the ACNC.  False if not. Absent or null if not confirmed.</value>
        [DataMember(Name="isACNCRegistered")]
        public bool? IsACNCRegistered { get; set; }

        /// <summary>
        /// [ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation.
        /// </summary>
        /// <value>[ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation.</value>
        [DataMember(Name="industryCode")]
        public string IndustryCode { get; set; }

        /// <summary>
        /// Legal organisation type
        /// </summary>
        /// <value>Legal organisation type</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OrganisationTypeEnum
        {
            /// <summary>
            /// Enum SOLETRADEREnum for SOLE_TRADER
            /// </summary>
            [EnumMember(Value = "SOLE_TRADER")]
            SOLETRADEREnum = 1,            /// <summary>
            /// Enum COMPANYEnum for COMPANY
            /// </summary>
            [EnumMember(Value = "COMPANY")]
            COMPANYEnum = 2,            /// <summary>
            /// Enum PARTNERSHIPEnum for PARTNERSHIP
            /// </summary>
            [EnumMember(Value = "PARTNERSHIP")]
            PARTNERSHIPEnum = 3,            /// <summary>
            /// Enum TRUSTEnum for TRUST
            /// </summary>
            [EnumMember(Value = "TRUST")]
            TRUSTEnum = 4,            /// <summary>
            /// Enum GOVERNMENTENTITYEnum for GOVERNMENT_ENTITY
            /// </summary>
            [EnumMember(Value = "GOVERNMENT_ENTITY")]
            GOVERNMENTENTITYEnum = 5,            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 6
        }

        /// <summary>
        /// Legal organisation type
        /// </summary>
        /// <value>Legal organisation type</value>
        [Required]
        [DataMember(Name="organisationType")]
        public OrganisationTypeEnum? OrganisationType { get; set; }

        /// <summary>
        /// Enumeration with values from ISO 3166 Alpha-3 country codes.  Assumed to be AUS if absent
        /// </summary>
        /// <value>Enumeration with values from ISO 3166 Alpha-3 country codes.  Assumed to be AUS if absent</value>
        [DataMember(Name="registeredCountry")]
        public string RegisteredCountry { get; set; }

        /// <summary>
        /// The date the organisation described was established
        /// </summary>
        /// <value>The date the organisation described was established</value>
        [DataMember(Name="establishmentDate")]
        public string EstablishmentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Organisation {\n");
            sb.Append("  LastUpdateTime: ").Append(LastUpdateTime).Append("\n");
            sb.Append("  AgentFirstName: ").Append(AgentFirstName).Append("\n");
            sb.Append("  AgentLastName: ").Append(AgentLastName).Append("\n");
            sb.Append("  AgentRole: ").Append(AgentRole).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Abn: ").Append(Abn).Append("\n");
            sb.Append("  Acn: ").Append(Acn).Append("\n");
            sb.Append("  IsACNCRegistered: ").Append(IsACNCRegistered).Append("\n");
            sb.Append("  IndustryCode: ").Append(IndustryCode).Append("\n");
            sb.Append("  OrganisationType: ").Append(OrganisationType).Append("\n");
            sb.Append("  RegisteredCountry: ").Append(RegisteredCountry).Append("\n");
            sb.Append("  EstablishmentDate: ").Append(EstablishmentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Organisation)obj);
        }

        /// <summary>
        /// Returns true if Organisation instances are equal
        /// </summary>
        /// <param name="other">Instance of Organisation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Organisation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LastUpdateTime == other.LastUpdateTime ||
                    LastUpdateTime != null &&
                    LastUpdateTime.Equals(other.LastUpdateTime)
                ) && 
                (
                    AgentFirstName == other.AgentFirstName ||
                    AgentFirstName != null &&
                    AgentFirstName.Equals(other.AgentFirstName)
                ) && 
                (
                    AgentLastName == other.AgentLastName ||
                    AgentLastName != null &&
                    AgentLastName.Equals(other.AgentLastName)
                ) && 
                (
                    AgentRole == other.AgentRole ||
                    AgentRole != null &&
                    AgentRole.Equals(other.AgentRole)
                ) && 
                (
                    BusinessName == other.BusinessName ||
                    BusinessName != null &&
                    BusinessName.Equals(other.BusinessName)
                ) && 
                (
                    LegalName == other.LegalName ||
                    LegalName != null &&
                    LegalName.Equals(other.LegalName)
                ) && 
                (
                    ShortName == other.ShortName ||
                    ShortName != null &&
                    ShortName.Equals(other.ShortName)
                ) && 
                (
                    Abn == other.Abn ||
                    Abn != null &&
                    Abn.Equals(other.Abn)
                ) && 
                (
                    Acn == other.Acn ||
                    Acn != null &&
                    Acn.Equals(other.Acn)
                ) && 
                (
                    IsACNCRegistered == other.IsACNCRegistered ||
                    IsACNCRegistered != null &&
                    IsACNCRegistered.Equals(other.IsACNCRegistered)
                ) && 
                (
                    IndustryCode == other.IndustryCode ||
                    IndustryCode != null &&
                    IndustryCode.Equals(other.IndustryCode)
                ) && 
                (
                    OrganisationType == other.OrganisationType ||
                    OrganisationType != null &&
                    OrganisationType.Equals(other.OrganisationType)
                ) && 
                (
                    RegisteredCountry == other.RegisteredCountry ||
                    RegisteredCountry != null &&
                    RegisteredCountry.Equals(other.RegisteredCountry)
                ) && 
                (
                    EstablishmentDate == other.EstablishmentDate ||
                    EstablishmentDate != null &&
                    EstablishmentDate.Equals(other.EstablishmentDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LastUpdateTime != null)
                    hashCode = hashCode * 59 + LastUpdateTime.GetHashCode();
                    if (AgentFirstName != null)
                    hashCode = hashCode * 59 + AgentFirstName.GetHashCode();
                    if (AgentLastName != null)
                    hashCode = hashCode * 59 + AgentLastName.GetHashCode();
                    if (AgentRole != null)
                    hashCode = hashCode * 59 + AgentRole.GetHashCode();
                    if (BusinessName != null)
                    hashCode = hashCode * 59 + BusinessName.GetHashCode();
                    if (LegalName != null)
                    hashCode = hashCode * 59 + LegalName.GetHashCode();
                    if (ShortName != null)
                    hashCode = hashCode * 59 + ShortName.GetHashCode();
                    if (Abn != null)
                    hashCode = hashCode * 59 + Abn.GetHashCode();
                    if (Acn != null)
                    hashCode = hashCode * 59 + Acn.GetHashCode();
                    if (IsACNCRegistered != null)
                    hashCode = hashCode * 59 + IsACNCRegistered.GetHashCode();
                    if (IndustryCode != null)
                    hashCode = hashCode * 59 + IndustryCode.GetHashCode();
                    if (OrganisationType != null)
                    hashCode = hashCode * 59 + OrganisationType.GetHashCode();
                    if (RegisteredCountry != null)
                    hashCode = hashCode * 59 + RegisteredCountry.GetHashCode();
                    if (EstablishmentDate != null)
                    hashCode = hashCode * 59 + EstablishmentDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Organisation left, Organisation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Organisation left, Organisation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
