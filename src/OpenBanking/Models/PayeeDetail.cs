/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PayeeDetail : IEquatable<PayeeDetail>
    { 
        /// <summary>
        /// ID of the payee adhering to the rules of ID permanence
        /// </summary>
        /// <value>ID of the payee adhering to the rules of ID permanence</value>
        [Required]
        [DataMember(Name="payeeId")]
        public string PayeeId { get; set; }

        /// <summary>
        /// The short display name of the payee as provided by the customer
        /// </summary>
        /// <value>The short display name of the payee as provided by the customer</value>
        [Required]
        [DataMember(Name="nickname")]
        public string Nickname { get; set; }

        /// <summary>
        /// A description of the payee provided by the customer
        /// </summary>
        /// <value>A description of the payee provided by the customer</value>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY
        /// </summary>
        /// <value>The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DOMESTICEnum for DOMESTIC
            /// </summary>
            [EnumMember(Value = "DOMESTIC")]
            DOMESTICEnum = 1,            /// <summary>
            /// Enum INTERNATIONALEnum for INTERNATIONAL
            /// </summary>
            [EnumMember(Value = "INTERNATIONAL")]
            INTERNATIONALEnum = 2,            /// <summary>
            /// Enum BILLEREnum for BILLER
            /// </summary>
            [EnumMember(Value = "BILLER")]
            BILLEREnum = 3
        }

        /// <summary>
        /// The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY
        /// </summary>
        /// <value>The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY</value>
        [Required]
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// The date the payee was created by the customer
        /// </summary>
        /// <value>The date the payee was created by the customer</value>
        [DataMember(Name="creationDate")]
        public string CreationDate { get; set; }

        /// <summary>
        /// Type of object included that describes the payee in detail
        /// </summary>
        /// <value>Type of object included that describes the payee in detail</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PayeeUTypeEnum
        {
            /// <summary>
            /// Enum DomesticEnum for domestic
            /// </summary>
            [EnumMember(Value = "domestic")]
            DomesticEnum = 1,            /// <summary>
            /// Enum BillerEnum for biller
            /// </summary>
            [EnumMember(Value = "biller")]
            BillerEnum = 2,            /// <summary>
            /// Enum InternationalEnum for international
            /// </summary>
            [EnumMember(Value = "international")]
            InternationalEnum = 3
        }

        /// <summary>
        /// Type of object included that describes the payee in detail
        /// </summary>
        /// <value>Type of object included that describes the payee in detail</value>
        [Required]
        [DataMember(Name="payeeUType")]
        public PayeeUTypeEnum? PayeeUType { get; set; }

        /// <summary>
        /// Gets or Sets Domestic
        /// </summary>
        [DataMember(Name="domestic")]
        public DomesticPayee Domestic { get; set; }

        /// <summary>
        /// Gets or Sets Biller
        /// </summary>
        [DataMember(Name="biller")]
        public BillerPayee Biller { get; set; }

        /// <summary>
        /// Gets or Sets International
        /// </summary>
        [DataMember(Name="international")]
        public InternationalPayee International { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayeeDetail {\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  PayeeUType: ").Append(PayeeUType).Append("\n");
            sb.Append("  Domestic: ").Append(Domestic).Append("\n");
            sb.Append("  Biller: ").Append(Biller).Append("\n");
            sb.Append("  International: ").Append(International).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PayeeDetail)obj);
        }

        /// <summary>
        /// Returns true if PayeeDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of PayeeDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayeeDetail other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PayeeId == other.PayeeId ||
                    PayeeId != null &&
                    PayeeId.Equals(other.PayeeId)
                ) && 
                (
                    Nickname == other.Nickname ||
                    Nickname != null &&
                    Nickname.Equals(other.Nickname)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    CreationDate != null &&
                    CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    PayeeUType == other.PayeeUType ||
                    PayeeUType != null &&
                    PayeeUType.Equals(other.PayeeUType)
                ) && 
                (
                    Domestic == other.Domestic ||
                    Domestic != null &&
                    Domestic.Equals(other.Domestic)
                ) && 
                (
                    Biller == other.Biller ||
                    Biller != null &&
                    Biller.Equals(other.Biller)
                ) && 
                (
                    International == other.International ||
                    International != null &&
                    International.Equals(other.International)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PayeeId != null)
                    hashCode = hashCode * 59 + PayeeId.GetHashCode();
                    if (Nickname != null)
                    hashCode = hashCode * 59 + Nickname.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (CreationDate != null)
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    if (PayeeUType != null)
                    hashCode = hashCode * 59 + PayeeUType.GetHashCode();
                    if (Domestic != null)
                    hashCode = hashCode * 59 + Domestic.GetHashCode();
                    if (Biller != null)
                    hashCode = hashCode * 59 + Biller.GetHashCode();
                    if (International != null)
                    hashCode = hashCode * 59 + International.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PayeeDetail left, PayeeDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PayeeDetail left, PayeeDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
