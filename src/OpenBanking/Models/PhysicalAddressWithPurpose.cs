/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PhysicalAddressWithPurpose : IEquatable<PhysicalAddressWithPurpose>
    { 
        /// <summary>
        /// The type of address object present
        /// </summary>
        /// <value>The type of address object present</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AddressUTypeEnum
        {
            /// <summary>
            /// Enum SimpleEnum for simple
            /// </summary>
            [EnumMember(Value = "simple")]
            SimpleEnum = 1,            /// <summary>
            /// Enum PafEnum for paf
            /// </summary>
            [EnumMember(Value = "paf")]
            PafEnum = 2
        }

        /// <summary>
        /// The type of address object present
        /// </summary>
        /// <value>The type of address object present</value>
        [Required]
        [DataMember(Name="addressUType")]
        public AddressUTypeEnum? AddressUType { get; set; }

        /// <summary>
        /// Gets or Sets Simple
        /// </summary>
        [DataMember(Name="simple")]
        public SimpleAddress Simple { get; set; }

        /// <summary>
        /// Gets or Sets Paf
        /// </summary>
        [DataMember(Name="paf")]
        public PAFAddress Paf { get; set; }

        /// <summary>
        /// Enumeration of values indicating the purpose of the physical address
        /// </summary>
        /// <value>Enumeration of values indicating the purpose of the physical address</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PurposeEnum
        {
            /// <summary>
            /// Enum REGISTEREDEnum for REGISTERED
            /// </summary>
            [EnumMember(Value = "REGISTERED")]
            REGISTEREDEnum = 1,            /// <summary>
            /// Enum MAILEnum for MAIL
            /// </summary>
            [EnumMember(Value = "MAIL")]
            MAILEnum = 2,            /// <summary>
            /// Enum PHYSICALEnum for PHYSICAL
            /// </summary>
            [EnumMember(Value = "PHYSICAL")]
            PHYSICALEnum = 3,            /// <summary>
            /// Enum WORKEnum for WORK
            /// </summary>
            [EnumMember(Value = "WORK")]
            WORKEnum = 4,            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 5
        }

        /// <summary>
        /// Enumeration of values indicating the purpose of the physical address
        /// </summary>
        /// <value>Enumeration of values indicating the purpose of the physical address</value>
        [Required]
        [DataMember(Name="purpose")]
        public PurposeEnum? Purpose { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhysicalAddressWithPurpose {\n");
            sb.Append("  AddressUType: ").Append(AddressUType).Append("\n");
            sb.Append("  Simple: ").Append(Simple).Append("\n");
            sb.Append("  Paf: ").Append(Paf).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PhysicalAddressWithPurpose)obj);
        }

        /// <summary>
        /// Returns true if PhysicalAddressWithPurpose instances are equal
        /// </summary>
        /// <param name="other">Instance of PhysicalAddressWithPurpose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhysicalAddressWithPurpose other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AddressUType == other.AddressUType ||
                    AddressUType != null &&
                    AddressUType.Equals(other.AddressUType)
                ) && 
                (
                    Simple == other.Simple ||
                    Simple != null &&
                    Simple.Equals(other.Simple)
                ) && 
                (
                    Paf == other.Paf ||
                    Paf != null &&
                    Paf.Equals(other.Paf)
                ) && 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.Equals(other.Purpose)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AddressUType != null)
                    hashCode = hashCode * 59 + AddressUType.GetHashCode();
                    if (Simple != null)
                    hashCode = hashCode * 59 + Simple.GetHashCode();
                    if (Paf != null)
                    hashCode = hashCode * 59 + Paf.GetHashCode();
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PhysicalAddressWithPurpose left, PhysicalAddressWithPurpose right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PhysicalAddressWithPurpose left, PhysicalAddressWithPurpose right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
