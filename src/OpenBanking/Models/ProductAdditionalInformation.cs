/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductAdditionalInformation : IEquatable<ProductAdditionalInformation>
    { 
        /// <summary>
        /// General overview of the product
        /// </summary>
        /// <value>General overview of the product</value>
        [DataMember(Name="overviewUri")]
        public string OverviewUri { get; set; }

        /// <summary>
        /// Terms and conditions for the product
        /// </summary>
        /// <value>Terms and conditions for the product</value>
        [DataMember(Name="termsUri")]
        public string TermsUri { get; set; }

        /// <summary>
        /// Eligibility rules and criteria for the product
        /// </summary>
        /// <value>Eligibility rules and criteria for the product</value>
        [DataMember(Name="eligibilityUri")]
        public string EligibilityUri { get; set; }

        /// <summary>
        /// Description of fees, pricing, discounts, exemptions and bonuses for the product
        /// </summary>
        /// <value>Description of fees, pricing, discounts, exemptions and bonuses for the product</value>
        [DataMember(Name="feesAndPricingUri")]
        public string FeesAndPricingUri { get; set; }

        /// <summary>
        /// Description of a bundle that this product can be part of
        /// </summary>
        /// <value>Description of a bundle that this product can be part of</value>
        [DataMember(Name="bundleUri")]
        public string BundleUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductAdditionalInformation {\n");
            sb.Append("  OverviewUri: ").Append(OverviewUri).Append("\n");
            sb.Append("  TermsUri: ").Append(TermsUri).Append("\n");
            sb.Append("  EligibilityUri: ").Append(EligibilityUri).Append("\n");
            sb.Append("  FeesAndPricingUri: ").Append(FeesAndPricingUri).Append("\n");
            sb.Append("  BundleUri: ").Append(BundleUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductAdditionalInformation)obj);
        }

        /// <summary>
        /// Returns true if ProductAdditionalInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductAdditionalInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductAdditionalInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OverviewUri == other.OverviewUri ||
                    OverviewUri != null &&
                    OverviewUri.Equals(other.OverviewUri)
                ) && 
                (
                    TermsUri == other.TermsUri ||
                    TermsUri != null &&
                    TermsUri.Equals(other.TermsUri)
                ) && 
                (
                    EligibilityUri == other.EligibilityUri ||
                    EligibilityUri != null &&
                    EligibilityUri.Equals(other.EligibilityUri)
                ) && 
                (
                    FeesAndPricingUri == other.FeesAndPricingUri ||
                    FeesAndPricingUri != null &&
                    FeesAndPricingUri.Equals(other.FeesAndPricingUri)
                ) && 
                (
                    BundleUri == other.BundleUri ||
                    BundleUri != null &&
                    BundleUri.Equals(other.BundleUri)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OverviewUri != null)
                    hashCode = hashCode * 59 + OverviewUri.GetHashCode();
                    if (TermsUri != null)
                    hashCode = hashCode * 59 + TermsUri.GetHashCode();
                    if (EligibilityUri != null)
                    hashCode = hashCode * 59 + EligibilityUri.GetHashCode();
                    if (FeesAndPricingUri != null)
                    hashCode = hashCode * 59 + FeesAndPricingUri.GetHashCode();
                    if (BundleUri != null)
                    hashCode = hashCode * 59 + BundleUri.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductAdditionalInformation left, ProductAdditionalInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductAdditionalInformation left, ProductAdditionalInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
