/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductDetail : IEquatable<ProductDetail>
    { 
        /// <summary>
        /// A provider specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.
        /// </summary>
        /// <value>A provider specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.</value>
        [Required]
        [DataMember(Name="productId")]
        public string ProductId { get; set; }

        /// <summary>
        /// The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate
        /// </summary>
        /// <value>The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate</value>
        [DataMember(Name="effectiveFrom")]
        public string EffectiveFrom { get; set; }

        /// <summary>
        /// The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products
        /// </summary>
        /// <value>The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products</value>
        [DataMember(Name="effectiveTo")]
        public string EffectiveTo { get; set; }

        /// <summary>
        /// The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)
        /// </summary>
        /// <value>The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)</value>
        [Required]
        [DataMember(Name="lastUpdated")]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategory
        /// </summary>
        [Required]
        [DataMember(Name="productCategory")]
        public EnumProductCategory ProductCategory { get; set; }

        /// <summary>
        /// The display name of the product
        /// </summary>
        /// <value>The display name of the product</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// A description of the product
        /// </summary>
        /// <value>A description of the product</value>
        [Required]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// A label of the brand for the product. Able to be used for filtering. For data providers with single brands this value is still required
        /// </summary>
        /// <value>A label of the brand for the product. Able to be used for filtering. For data providers with single brands this value is still required</value>
        [Required]
        [DataMember(Name="brand")]
        public string Brand { get; set; }

        /// <summary>
        /// An optional display name of the brand
        /// </summary>
        /// <value>An optional display name of the brand</value>
        [DataMember(Name="brandName")]
        public string BrandName { get; set; }

        /// <summary>
        /// A link to the an application web page where this product can be applied for.
        /// </summary>
        /// <value>A link to the an application web page where this product can be applied for.</value>
        [DataMember(Name="applicationUri")]
        public string ApplicationUri { get; set; }

        /// <summary>
        /// Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable
        /// </summary>
        /// <value>Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable</value>
        [Required]
        [DataMember(Name="isTailored")]
        public bool? IsTailored { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [DataMember(Name="additionalInformation")]
        public ProductAdditionalInformation AdditionalInformation { get; set; }

        /// <summary>
        /// Gets or Sets Bundles
        /// </summary>
        [DataMember(Name="bundles")]
        public List<ProductBundles> Bundles { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features")]
        public List<ProductFeatures> Features { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name="constraints")]
        public List<ProductConstraints> Constraints { get; set; }

        /// <summary>
        /// Gets or Sets Eligibility
        /// </summary>
        [DataMember(Name="eligibility")]
        public List<ProductEligibility> Eligibility { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees")]
        public List<ProductFees> Fees { get; set; }

        /// <summary>
        /// Gets or Sets DepositRates
        /// </summary>
        [DataMember(Name="depositRates")]
        public List<ProductDepositRates> DepositRates { get; set; }

        /// <summary>
        /// Gets or Sets LendingRates
        /// </summary>
        [DataMember(Name="lendingRates")]
        public List<ProductLendingRates> LendingRates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductDetail {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  EffectiveTo: ").Append(EffectiveTo).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  ApplicationUri: ").Append(ApplicationUri).Append("\n");
            sb.Append("  IsTailored: ").Append(IsTailored).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  Bundles: ").Append(Bundles).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Eligibility: ").Append(Eligibility).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  DepositRates: ").Append(DepositRates).Append("\n");
            sb.Append("  LendingRates: ").Append(LendingRates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductDetail)obj);
        }

        /// <summary>
        /// Returns true if ProductDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductDetail other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProductId == other.ProductId ||
                    ProductId != null &&
                    ProductId.Equals(other.ProductId)
                ) && 
                (
                    EffectiveFrom == other.EffectiveFrom ||
                    EffectiveFrom != null &&
                    EffectiveFrom.Equals(other.EffectiveFrom)
                ) && 
                (
                    EffectiveTo == other.EffectiveTo ||
                    EffectiveTo != null &&
                    EffectiveTo.Equals(other.EffectiveTo)
                ) && 
                (
                    LastUpdated == other.LastUpdated ||
                    LastUpdated != null &&
                    LastUpdated.Equals(other.LastUpdated)
                ) && 
                (
                    ProductCategory == other.ProductCategory ||
                    ProductCategory != null &&
                    ProductCategory.Equals(other.ProductCategory)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Brand == other.Brand ||
                    Brand != null &&
                    Brand.Equals(other.Brand)
                ) && 
                (
                    BrandName == other.BrandName ||
                    BrandName != null &&
                    BrandName.Equals(other.BrandName)
                ) && 
                (
                    ApplicationUri == other.ApplicationUri ||
                    ApplicationUri != null &&
                    ApplicationUri.Equals(other.ApplicationUri)
                ) && 
                (
                    IsTailored == other.IsTailored ||
                    IsTailored != null &&
                    IsTailored.Equals(other.IsTailored)
                ) && 
                (
                    AdditionalInformation == other.AdditionalInformation ||
                    AdditionalInformation != null &&
                    AdditionalInformation.Equals(other.AdditionalInformation)
                ) && 
                (
                    Bundles == other.Bundles ||
                    Bundles != null &&
                    Bundles.SequenceEqual(other.Bundles)
                ) && 
                (
                    Features == other.Features ||
                    Features != null &&
                    Features.SequenceEqual(other.Features)
                ) && 
                (
                    Constraints == other.Constraints ||
                    Constraints != null &&
                    Constraints.SequenceEqual(other.Constraints)
                ) && 
                (
                    Eligibility == other.Eligibility ||
                    Eligibility != null &&
                    Eligibility.SequenceEqual(other.Eligibility)
                ) && 
                (
                    Fees == other.Fees ||
                    Fees != null &&
                    Fees.SequenceEqual(other.Fees)
                ) && 
                (
                    DepositRates == other.DepositRates ||
                    DepositRates != null &&
                    DepositRates.SequenceEqual(other.DepositRates)
                ) && 
                (
                    LendingRates == other.LendingRates ||
                    LendingRates != null &&
                    LendingRates.SequenceEqual(other.LendingRates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProductId != null)
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                    if (EffectiveFrom != null)
                    hashCode = hashCode * 59 + EffectiveFrom.GetHashCode();
                    if (EffectiveTo != null)
                    hashCode = hashCode * 59 + EffectiveTo.GetHashCode();
                    if (LastUpdated != null)
                    hashCode = hashCode * 59 + LastUpdated.GetHashCode();
                    if (ProductCategory != null)
                    hashCode = hashCode * 59 + ProductCategory.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                    if (BrandName != null)
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                    if (ApplicationUri != null)
                    hashCode = hashCode * 59 + ApplicationUri.GetHashCode();
                    if (IsTailored != null)
                    hashCode = hashCode * 59 + IsTailored.GetHashCode();
                    if (AdditionalInformation != null)
                    hashCode = hashCode * 59 + AdditionalInformation.GetHashCode();
                    if (Bundles != null)
                    hashCode = hashCode * 59 + Bundles.GetHashCode();
                    if (Features != null)
                    hashCode = hashCode * 59 + Features.GetHashCode();
                    if (Constraints != null)
                    hashCode = hashCode * 59 + Constraints.GetHashCode();
                    if (Eligibility != null)
                    hashCode = hashCode * 59 + Eligibility.GetHashCode();
                    if (Fees != null)
                    hashCode = hashCode * 59 + Fees.GetHashCode();
                    if (DepositRates != null)
                    hashCode = hashCode * 59 + DepositRates.GetHashCode();
                    if (LendingRates != null)
                    hashCode = hashCode * 59 + LendingRates.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductDetail left, ProductDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductDetail left, ProductDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
