/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductDiscounts : IEquatable<ProductDiscounts>
    { 
        /// <summary>
        /// Description of the discount
        /// </summary>
        /// <value>Description of the discount</value>
        [Required]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// The type of discount. See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of discount. See the next section for an overview of valid values and their meaning</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DiscountTypeEnum
        {
            /// <summary>
            /// Enum BALANCEEnum for BALANCE
            /// </summary>
            [EnumMember(Value = "BALANCE")]
            BALANCEEnum = 1,            /// <summary>
            /// Enum DEPOSITSEnum for DEPOSITS
            /// </summary>
            [EnumMember(Value = "DEPOSITS")]
            DEPOSITSEnum = 2,            /// <summary>
            /// Enum PAYMENTSEnum for PAYMENTS
            /// </summary>
            [EnumMember(Value = "PAYMENTS")]
            PAYMENTSEnum = 3,            /// <summary>
            /// Enum BUNDLEEnum for BUNDLE
            /// </summary>
            [EnumMember(Value = "BUNDLE")]
            BUNDLEEnum = 4
        }

        /// <summary>
        /// The type of discount. See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of discount. See the next section for an overview of valid values and their meaning</value>
        [Required]
        [DataMember(Name="discountType")]
        public DiscountTypeEnum? DiscountType { get; set; }

        /// <summary>
        /// Value of the discount. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself
        /// </summary>
        /// <value>Value of the discount. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself</value>
        [Required]
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Generic field containing additional information relevant to the discountType specified. Whether mandatory or not is dependent on the value of discountType
        /// </summary>
        /// <value>Generic field containing additional information relevant to the discountType specified. Whether mandatory or not is dependent on the value of discountType</value>
        [DataMember(Name="additionalValue")]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductDiscounts {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductDiscounts)obj);
        }

        /// <summary>
        /// Returns true if ProductDiscounts instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductDiscounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductDiscounts other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DiscountType == other.DiscountType ||
                    DiscountType != null &&
                    DiscountType.Equals(other.DiscountType)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    AdditionalValue == other.AdditionalValue ||
                    AdditionalValue != null &&
                    AdditionalValue.Equals(other.AdditionalValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DiscountType != null)
                    hashCode = hashCode * 59 + DiscountType.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (AdditionalValue != null)
                    hashCode = hashCode * 59 + AdditionalValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductDiscounts left, ProductDiscounts right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductDiscounts left, ProductDiscounts right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
