/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductFeatures : IEquatable<ProductFeatures>
    { 
        /// <summary>
        /// The type of feature described
        /// </summary>
        /// <value>The type of feature described</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FeatureTypeEnum
        {
            /// <summary>
            /// Enum CARDACCESSEnum for CARD_ACCESS
            /// </summary>
            [EnumMember(Value = "CARD_ACCESS")]
            CARDACCESSEnum = 1,            /// <summary>
            /// Enum ADDITIONALCARDSEnum for ADDITIONAL_CARDS
            /// </summary>
            [EnumMember(Value = "ADDITIONAL_CARDS")]
            ADDITIONALCARDSEnum = 2,            /// <summary>
            /// Enum UNLIMITEDTXNSEnum for UNLIMITED_TXNS
            /// </summary>
            [EnumMember(Value = "UNLIMITED_TXNS")]
            UNLIMITEDTXNSEnum = 3,            /// <summary>
            /// Enum FREETXNSEnum for FREE_TXNS
            /// </summary>
            [EnumMember(Value = "FREE_TXNS")]
            FREETXNSEnum = 4,            /// <summary>
            /// Enum FREETXNSALLOWANCEEnum for FREE_TXNS_ALLOWANCE
            /// </summary>
            [EnumMember(Value = "FREE_TXNS_ALLOWANCE")]
            FREETXNSALLOWANCEEnum = 5,            /// <summary>
            /// Enum LOYALTYPROGRAMEnum for LOYALTY_PROGRAM
            /// </summary>
            [EnumMember(Value = "LOYALTY_PROGRAM")]
            LOYALTYPROGRAMEnum = 6,            /// <summary>
            /// Enum OFFSETEnum for OFFSET
            /// </summary>
            [EnumMember(Value = "OFFSET")]
            OFFSETEnum = 7,            /// <summary>
            /// Enum OVERDRAFTEnum for OVERDRAFT
            /// </summary>
            [EnumMember(Value = "OVERDRAFT")]
            OVERDRAFTEnum = 8,            /// <summary>
            /// Enum REDRAWEnum for REDRAW
            /// </summary>
            [EnumMember(Value = "REDRAW")]
            REDRAWEnum = 9,            /// <summary>
            /// Enum INSURANCEEnum for INSURANCE
            /// </summary>
            [EnumMember(Value = "INSURANCE")]
            INSURANCEEnum = 10,            /// <summary>
            /// Enum BALANCETRANSFERSEnum for BALANCE_TRANSFERS
            /// </summary>
            [EnumMember(Value = "BALANCE_TRANSFERS")]
            BALANCETRANSFERSEnum = 11,            /// <summary>
            /// Enum INTERESTFREEEnum for INTEREST_FREE
            /// </summary>
            [EnumMember(Value = "INTEREST_FREE")]
            INTERESTFREEEnum = 12,            /// <summary>
            /// Enum INTERESTFREETRANSFERSEnum for INTEREST_FREE_TRANSFERS
            /// </summary>
            [EnumMember(Value = "INTEREST_FREE_TRANSFERS")]
            INTERESTFREETRANSFERSEnum = 13,            /// <summary>
            /// Enum DIGITALWALLETEnum for DIGITAL_WALLET
            /// </summary>
            [EnumMember(Value = "DIGITAL_WALLET")]
            DIGITALWALLETEnum = 14,            /// <summary>
            /// Enum DIGITALBANKINGEnum for DIGITAL_BANKING
            /// </summary>
            [EnumMember(Value = "DIGITAL_BANKING")]
            DIGITALBANKINGEnum = 15,            /// <summary>
            /// Enum NPPPAYIDEnum for NPP_PAYID
            /// </summary>
            [EnumMember(Value = "NPP_PAYID")]
            NPPPAYIDEnum = 16,            /// <summary>
            /// Enum NPPENABLEDEnum for NPP_ENABLED
            /// </summary>
            [EnumMember(Value = "NPP_ENABLED")]
            NPPENABLEDEnum = 17,            /// <summary>
            /// Enum DONATEINTERESTEnum for DONATE_INTEREST
            /// </summary>
            [EnumMember(Value = "DONATE_INTEREST")]
            DONATEINTERESTEnum = 18,            /// <summary>
            /// Enum BILLPAYMENTEnum for BILL_PAYMENT
            /// </summary>
            [EnumMember(Value = "BILL_PAYMENT")]
            BILLPAYMENTEnum = 19
        }

        /// <summary>
        /// The type of feature described
        /// </summary>
        /// <value>The type of feature described</value>
        [Required]
        [DataMember(Name="featureType")]
        public FeatureTypeEnum? FeatureType { get; set; }

        /// <summary>
        /// Generic field containing additional information relevant to the featureType specified. Whether mandatory or not is dependent on the value of featureType
        /// </summary>
        /// <value>Generic field containing additional information relevant to the featureType specified. Whether mandatory or not is dependent on the value of featureType</value>
        [DataMember(Name="additionalValue")]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductFeatures {\n");
            sb.Append("  FeatureType: ").Append(FeatureType).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductFeatures)obj);
        }

        /// <summary>
        /// Returns true if ProductFeatures instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductFeatures other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FeatureType == other.FeatureType ||
                    FeatureType != null &&
                    FeatureType.Equals(other.FeatureType)
                ) && 
                (
                    AdditionalValue == other.AdditionalValue ||
                    AdditionalValue != null &&
                    AdditionalValue.Equals(other.AdditionalValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FeatureType != null)
                    hashCode = hashCode * 59 + FeatureType.GetHashCode();
                    if (AdditionalValue != null)
                    hashCode = hashCode * 59 + AdditionalValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductFeatures left, ProductFeatures right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductFeatures left, ProductFeatures right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
