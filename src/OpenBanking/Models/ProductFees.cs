/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OpenBanking.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductFees : IEquatable<ProductFees>
    { 
        /// <summary>
        /// Name of the fee
        /// </summary>
        /// <value>Name of the fee</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The type of fee
        /// </summary>
        /// <value>The type of fee</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FeeTypeEnum
        {
            /// <summary>
            /// Enum PERIODICEnum for PERIODIC
            /// </summary>
            [EnumMember(Value = "PERIODIC")]
            PERIODICEnum = 1,            /// <summary>
            /// Enum TRANSACTIONEnum for TRANSACTION
            /// </summary>
            [EnumMember(Value = "TRANSACTION")]
            TRANSACTIONEnum = 2,            /// <summary>
            /// Enum ESTABLISHMENTEnum for ESTABLISHMENT
            /// </summary>
            [EnumMember(Value = "ESTABLISHMENT")]
            ESTABLISHMENTEnum = 3,            /// <summary>
            /// Enum EXITEnum for EXIT
            /// </summary>
            [EnumMember(Value = "EXIT")]
            EXITEnum = 4,            /// <summary>
            /// Enum OVERDRAWEnum for OVERDRAW
            /// </summary>
            [EnumMember(Value = "OVERDRAW")]
            OVERDRAWEnum = 5,            /// <summary>
            /// Enum MINBALANCEEnum for MIN_BALANCE
            /// </summary>
            [EnumMember(Value = "MIN_BALANCE")]
            MINBALANCEEnum = 6,            /// <summary>
            /// Enum REDRAWEnum for REDRAW
            /// </summary>
            [EnumMember(Value = "REDRAW")]
            REDRAWEnum = 7,            /// <summary>
            /// Enum CHEQUECASHEnum for CHEQUE_CASH
            /// </summary>
            [EnumMember(Value = "CHEQUE_CASH")]
            CHEQUECASHEnum = 8,            /// <summary>
            /// Enum CHEQUESTOPEnum for CHEQUE_STOP
            /// </summary>
            [EnumMember(Value = "CHEQUE_STOP")]
            CHEQUESTOPEnum = 9,            /// <summary>
            /// Enum CHEQUEBOOKEnum for CHEQUE_BOOK
            /// </summary>
            [EnumMember(Value = "CHEQUE_BOOK")]
            CHEQUEBOOKEnum = 10,            /// <summary>
            /// Enum CARDREPLACEEnum for CARD_REPLACE
            /// </summary>
            [EnumMember(Value = "CARD_REPLACE")]
            CARDREPLACEEnum = 11,            /// <summary>
            /// Enum PAPERSTATEMENTEnum for PAPER_STATEMENT
            /// </summary>
            [EnumMember(Value = "PAPER_STATEMENT")]
            PAPERSTATEMENTEnum = 12,            /// <summary>
            /// Enum OTHEREVENTEnum for OTHER_EVENT
            /// </summary>
            [EnumMember(Value = "OTHER_EVENT")]
            OTHEREVENTEnum = 13
        }

        /// <summary>
        /// The type of fee
        /// </summary>
        /// <value>The type of fee</value>
        [Required]
        [DataMember(Name="feeType")]
        public FeeTypeEnum? FeeType { get; set; }

        /// <summary>
        /// The amount charged for the fee. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory
        /// </summary>
        /// <value>The amount charged for the fee. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// A fee rate calculated based on a proportion of the balance. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory
        /// </summary>
        /// <value>A fee rate calculated based on a proportion of the balance. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory</value>
        [DataMember(Name="balanceRate")]
        public string BalanceRate { get; set; }

        /// <summary>
        /// A fee rate calculated based on a proportion of a transaction. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory
        /// </summary>
        /// <value>A fee rate calculated based on a proportion of a transaction. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory</value>
        [DataMember(Name="transactionRate")]
        public string TransactionRate { get; set; }

        /// <summary>
        /// The currency the fee will be charged in. Assumes AUD if absent
        /// </summary>
        /// <value>The currency the fee will be charged in. Assumes AUD if absent</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Generic field containing additional information relevant to the feeType specified. Whether mandatory or not is dependent on the value of feeType
        /// </summary>
        /// <value>Generic field containing additional information relevant to the feeType specified. Whether mandatory or not is dependent on the value of feeType</value>
        [DataMember(Name="additionalValue")]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Display text providing more information on the fee
        /// </summary>
        /// <value>Display text providing more information on the fee</value>
        [DataMember(Name="additionalInfo")]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Link to a web page with more information on this fee
        /// </summary>
        /// <value>Link to a web page with more information on this fee</value>
        [DataMember(Name="additionalInfoUri")]
        public string AdditionalInfoUri { get; set; }

        /// <summary>
        /// Gets or Sets Discounts
        /// </summary>
        [DataMember(Name="discounts")]
        public List<ProductDiscounts> Discounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductFees {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceRate: ").Append(BalanceRate).Append("\n");
            sb.Append("  TransactionRate: ").Append(TransactionRate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  AdditionalInfoUri: ").Append(AdditionalInfoUri).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductFees)obj);
        }

        /// <summary>
        /// Returns true if ProductFees instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductFees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductFees other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    FeeType == other.FeeType ||
                    FeeType != null &&
                    FeeType.Equals(other.FeeType)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    BalanceRate == other.BalanceRate ||
                    BalanceRate != null &&
                    BalanceRate.Equals(other.BalanceRate)
                ) && 
                (
                    TransactionRate == other.TransactionRate ||
                    TransactionRate != null &&
                    TransactionRate.Equals(other.TransactionRate)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    AdditionalValue == other.AdditionalValue ||
                    AdditionalValue != null &&
                    AdditionalValue.Equals(other.AdditionalValue)
                ) && 
                (
                    AdditionalInfo == other.AdditionalInfo ||
                    AdditionalInfo != null &&
                    AdditionalInfo.Equals(other.AdditionalInfo)
                ) && 
                (
                    AdditionalInfoUri == other.AdditionalInfoUri ||
                    AdditionalInfoUri != null &&
                    AdditionalInfoUri.Equals(other.AdditionalInfoUri)
                ) && 
                (
                    Discounts == other.Discounts ||
                    Discounts != null &&
                    Discounts.SequenceEqual(other.Discounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (FeeType != null)
                    hashCode = hashCode * 59 + FeeType.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (BalanceRate != null)
                    hashCode = hashCode * 59 + BalanceRate.GetHashCode();
                    if (TransactionRate != null)
                    hashCode = hashCode * 59 + TransactionRate.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (AdditionalValue != null)
                    hashCode = hashCode * 59 + AdditionalValue.GetHashCode();
                    if (AdditionalInfo != null)
                    hashCode = hashCode * 59 + AdditionalInfo.GetHashCode();
                    if (AdditionalInfoUri != null)
                    hashCode = hashCode * 59 + AdditionalInfoUri.GetHashCode();
                    if (Discounts != null)
                    hashCode = hashCode * 59 + Discounts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductFees left, ProductFees right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductFees left, ProductFees right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
